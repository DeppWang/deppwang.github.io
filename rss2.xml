<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>德普王</title>
    <link>https://depp.wang/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>每个人都需要有自己的哈姆雷特</description>
    <pubDate>Wed, 19 Jun 2024 11:29:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>个人网站图片从阿里云 OSS 迁移到 Cloudflare R2</title>
      <link>https://depp.wang/2024/image-from-oss-to-r2/</link>
      <guid>https://depp.wang/2024/image-from-oss-to-r2/</guid>
      <pubDate>Wed, 19 Jun 2024 11:20:01 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://depp.wang&quot;&gt;个人网站&lt;/a&gt;这两个月访问量增加了不少，导致阿里云对象存储（OSS）费用涨幅很大，1 月 0.09 元、4 月  2.64 元，5 月直接 6.55 元。当初选择阿里云对象存储，就是因为便宜，现在它的这一特性逐渐丧失了。我个人网站部署在 GitHub Pages 上的，使用 Cloudflare 做了缓存。因为网站本身就使用了 Cloudflare，加上 Cloudflare R2 的免费额度还能覆盖到目前我的使用量。所以将图片迁移到 Cloudlare R2。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="https://depp.wang">个人网站</a>这两个月访问量增加了不少，导致阿里云对象存储（OSS）费用涨幅很大，1 月 0.09 元、4 月  2.64 元，5 月直接 6.55 元。当初选择阿里云对象存储，就是因为便宜，现在它的这一特性逐渐丧失了。我个人网站部署在 GitHub Pages 上的，使用 Cloudflare 做了缓存。因为网站本身就使用了 Cloudflare，加上 Cloudflare R2 的免费额度还能覆盖到目前我的使用量。所以将图片迁移到 Cloudlare R2。</p><a id="more"></a><h2 id="Cloudflare-R2-免费额度与国内访问效果"><a href="#Cloudflare-R2-免费额度与国内访问效果" class="headerlink" title="Cloudflare R2 免费额度与国内访问效果"></a>Cloudflare R2 免费额度与国内访问效果</h2><table><thead><tr><th align="left">免费额度</th><th></th></tr></thead><tbody><tr><td align="left">存储</td><td>10 GB / month</td></tr><tr><td align="left">A 类操作</td><td>每月 100 万个请求</td></tr><tr><td align="left">B 类操作</td><td>每月 1000 万个请求</td></tr><tr><td align="left">出口（数据传输到互联网）</td><td>免费</td></tr><tr><td align="left">- <a href="https://developers.cloudflare.com/r2/pricing/#free-tier" target="_blank" rel="noopener">https://developers.cloudflare.com/r2/pricing/#free-tier</a></td><td></td></tr></tbody></table><p>Cloudflare R2 国内网络访问速度：</p><p><img src="https://hexoblog.r2.depp.wang/202406191718791555.png" alt=""></p><p>阿里云对象存储国内访问效果：</p><p><img src="https://hexoblog.r2.depp.wang/202406191718791581.png" alt=""></p><p>Cloudflare 的访问速度平均只有阿里云的访问速度的一半，还可以接受。</p><h2 id="设置-Cloudflare-R2-存储桶可公网访问"><a href="#设置-Cloudflare-R2-存储桶可公网访问" class="headerlink" title="设置 Cloudflare R2 存储桶可公网访问"></a>设置 Cloudflare R2 存储桶可公网访问</h2><p>设置自定义域，如：<code>hexoblog.r2.depp.wang</code></p><p><img src="https://hexoblog.r2.depp.wang/20240618203531.png" alt=""></p><p>设置后可通过: <a href="https://hexoblog.r2.depp.wang/cookie-copy.mp4" target="_blank" rel="noopener">https://hexoblog.r2.depp.wang/cookie-copy.mp4</a> 公网访问 hexoblog 桶中 cookie-copy.mp4</p><h2 id="阿里云对象存储数据下载"><a href="#阿里云对象存储数据下载" class="headerlink" title="阿里云对象存储数据下载"></a>阿里云对象存储数据下载</h2><p>下载配置命令行工具 ossutil 后，使用命令下载所有数据：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ossutil cp -r oss://deppwang/blog/ /Volumes/NAS/Documents/阿里云对象存储/deppwang/blog-20240618</span><br></pre></td></tr></table></figure><h2 id="数据上传到-Cloudflare"><a href="#数据上传到-Cloudflare" class="headerlink" title="数据上传到 Cloudflare"></a>数据上传到 Cloudflare</h2><p>Cloudflare R2 使用 AWS S3 存储，macOS 安装 awscli</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install awscli</span><br></pre></td></tr></table></figure><p>Cloudflare 中创建 API 令牌，复制「访问密钥 ID (Access Key ID)」、「机密访问密钥 (Secret Access Key)」，使用 <code>aws configure</code> 命令配置，配置后数据在文件 <code>~/.aws/credentials</code> 中。</p><p>配置 endpoint_url</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.aws/config</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[default]</span></span><br><span class="line"><span class="attr">region</span> = auto</span><br><span class="line"><span class="attr">output</span> = json</span><br><span class="line"><span class="attr">endpoint_url</span> = https://xxx.r2.cloudflarestorage.com</span><br></pre></td></tr></table></figure><p>上传</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 上传单个文件</span></span><br><span class="line">aws s3 cp /Volumes/NAS/Documents/阿里云对象存储/deppwang/blog-20240618/cookie-copy.mp4 s3://hexoblog/cookie-copy.mp4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传文件夹</span></span><br><span class="line">aws s3 cp /Volumes/NAS/Documents/阿里云对象存储/deppwang/blog-20240618/ s3://hexoblog/ --recursive</span><br></pre></td></tr></table></figure><h2 id="脚本替换指定文件夹中所有文档的图片"><a href="#脚本替换指定文件夹中所有文档的图片" class="headerlink" title="脚本替换指定文件夹中所有文档的图片"></a>脚本替换指定文件夹中所有文档的图片</h2><p>如果使用 PicGO 图片上传，搜索 <a href="https://github.com/wayjam/picgo-plugin-s3" target="_blank" rel="noopener">s3 插件</a>安装</p><p>以下是我替换我 Obsidian 文件夹的 Python 脚本（GPT 生成）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义旧的和新的图床链接</span></span><br><span class="line">old_link = <span class="string">"https://deppwang.oss-cn-beijing.aliyuncs.com/blog/"</span></span><br><span class="line">new_link = <span class="string">"https://hexoblog.r2.depp.wang/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Obsidian 文件夹路径</span></span><br><span class="line">obsidian_folder = <span class="string">"/Users/depp/Documents/Obsidian"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式模式</span></span><br><span class="line">pattern1 = re.compile(<span class="string">r'!\[\]\('</span> + re.escape(old_link) + <span class="string">r'([^\)]+)\)'</span>)</span><br><span class="line">pattern2 = re.compile(<span class="string">r'!\[([^\]]*)\]\('</span> + re.escape(old_link) + <span class="string">r'([^\)]+)\)'</span>)</span><br><span class="line">pattern3 = re.compile(<span class="string">r'&lt;img src="'</span> + re.escape(old_link) + <span class="string">r'([^"]+)"'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_links</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        content = file.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 替换链接</span></span><br><span class="line">    content = pattern1.sub(<span class="string">r'![]('</span> + new_link + <span class="string">r'\1)'</span>, content)</span><br><span class="line">    content = pattern2.sub(<span class="string">r'![\1]('</span> + new_link + <span class="string">r'\2)'</span>, content)</span><br><span class="line">    content = pattern3.sub(<span class="string">r'&lt;img src="'</span> + new_link + <span class="string">r'\1"'</span>, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traverse_folder</span><span class="params">(folder_path)</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(folder_path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="comment"># if x &gt; 100:</span></span><br><span class="line">            <span class="comment">#     return</span></span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">".md"</span>):  <span class="comment"># 假设 Obsidian 笔记文件是以 .md 结尾</span></span><br><span class="line">                file_path = os.path.join(root, file)</span><br><span class="line">                replace_links(file_path)</span><br><span class="line">                print(<span class="string">f"Processed: <span class="subst">&#123;file_path&#125;</span>"</span>)</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始遍历文件夹并替换链接</span></span><br><span class="line">traverse_folder(obsidian_folder)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://depp.wang/2024/image-from-oss-to-r2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>更简单的「有道云笔记」导出与备份</title>
      <link>https://depp.wang/2024/simple-youdaonote-pull/</link>
      <guid>https://depp.wang/2024/simple-youdaonote-pull/</guid>
      <pubDate>Tue, 18 Jun 2024 04:48:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://hexoblog.r2.depp.wang/20240618124244.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/deppwang/youdaonote-pull&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;youdaonote-pull&lt;/a&gt; 是我写的一个开源的有道云笔记导出与备份工具，同时可以将不是 Markdown 格式的笔记转换为 Markdown 格式。&lt;/p&gt;
&lt;p&gt;我写了比较详细的使用步骤，对于非技术人员的同学来说，可能还是有点门槛。所以我又花了些时间，将其简化了可直接本地运行程序，你不再需要安装 Git、Python 和下载代码。&lt;/p&gt;
&lt;p&gt;程序完全本地运行，无需担心隐私问题。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://hexoblog.r2.depp.wang/20240618124244.png" alt=""></p><p><a href="https://github.com/deppwang/youdaonote-pull" target="_blank" rel="noopener">youdaonote-pull</a> 是我写的一个开源的有道云笔记导出与备份工具，同时可以将不是 Markdown 格式的笔记转换为 Markdown 格式。</p><p>我写了比较详细的使用步骤，对于非技术人员的同学来说，可能还是有点门槛。所以我又花了些时间，将其简化了可直接本地运行程序，你不再需要安装 Git、Python 和下载代码。</p><p>程序完全本地运行，无需担心隐私问题。</p><a id="more"></a><p>以下是使用方法。</p><p>前置条件: </p><ol><li>有一台电脑，Windows / Mac / Linux 都可。</li><li>电脑上已经安装支持 Chrome 插件的浏览器，如 Google Chrome / Microsoft Edge。</li></ol><h2 id="1、下载程序"><a href="#1、下载程序" class="headerlink" title="1、下载程序"></a>1、下载程序</h2><p>在<a href="https://akkcmwhbj8.feishu.cn/drive/folder/LTdufMD2mlM1jNdxCizcq8thnAg" target="_blank" rel="noopener">此处</a>（密码: <code>61@8246K</code>）下载你电脑对应的运行程序压缩包，再解压。</p><p><img src="https://hexoblog.r2.depp.wang/20240617232804.png" alt=""></p><p>Windows 对应的运行程序压缩包内容：</p><p><img src="https://hexoblog.r2.depp.wang/20240617232831.png" alt=""></p><h2 id="2、安装浏览器插件复制登录-Cookie"><a href="#2、安装浏览器插件复制登录-Cookie" class="headerlink" title="2、安装浏览器插件复制登录 Cookie"></a>2、安装浏览器插件复制登录 Cookie</h2><p>有道云笔记登陆有图形验证码，所以程序无法直接通过账号密码的方式登录。所以需要你浏览器网页登录后，复制其登录 Cookie，有了 Cookie，程序才可以读取到你的有道云笔记数据。</p><p>可以通过安装一个插件（<a href="https://chromewebstore.google.com/detail/cookie-copy/igfcbpdchlohbhjdfbcimhbpajlglaac?hl=zh-CN&utm_source=ext_sidebar" target="_blank" rel="noopener">Cookie-copy</a>）快速复制 Cookie。</p><p><img src="https://hexoblog.r2.depp.wang/20240617232910.png" alt=""></p><p>浏览器中打开 chrome://extensions/ ，开启「开发者模式」，再将「Cookie-copy_0.0.4.crx」插件拖拽到此界面即可完成安装。</p><p><img src="https://hexoblog.r2.depp.wang/20240613172650.png" alt=""></p><video controls width="640" height="360">    <source src="https://hexoblog.r2.depp.wang/cookie-copy.mp4" type="video/mp4">  </video><p>登陆有道云笔记网页版本后，在  Cookie-copy 插件中复制这 3 个 Cookie：</p><ul><li><code>YNOTE_CSTK</code></li><li><code>YNOTE_LOGIN</code></li><li><code>YNOTE_SESS</code></li></ul><p><img src="https://hexoblog.r2.depp.wang/20240613172452.png" alt=""></p><p>Cookie-copy 插件使用完之后可以将其关闭或者移除。</p><h2 id="3、cookies-json-中配置-Cookie"><a href="#3、cookies-json-中配置-Cookie" class="headerlink" title="3、cookies.json 中配置 Cookie"></a>3、cookies.json 中配置 Cookie</h2><p>替换 cookies.json 中的复制 3 个参数，替换后结果应该如下所示：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"cookies"</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"YNOTE_CSTK"</span>,</span><br><span class="line">            <span class="string">"rR_Pejz0"</span>,</span><br><span class="line">            <span class="string">".note.youdao.com"</span>,</span><br><span class="line">            <span class="string">"/"</span></span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"YNOTE_LOGIN"</span>,</span><br><span class="line">            <span class="string">"3||1649054441155"</span>,</span><br><span class="line">            <span class="string">".note.youdao.com"</span>,</span><br><span class="line">            <span class="string">"/"</span></span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"YNOTE_SESS"</span>,</span><br><span class="line">            <span class="string">"v2|BdllbnwfaWl5RMUWOfqZ0gShf***6LqFRqB0MYfh4JLR"</span>,</span><br><span class="line">            <span class="string">".note.youdao.com"</span>,</span><br><span class="line">            <span class="string">"/"</span></span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、双击运行下载"><a href="#4、双击运行下载" class="headerlink" title="4、双击运行下载"></a>4、双击运行下载</h2><p><img src="https://hexoblog.r2.depp.wang/20240613220215.png" alt=""></p><p>双击程序运行，会打开终端执行。所有笔记会默认下载到当前目录的 youdaonote 文件夹中。会在 logs 目录存放运行日志。你也可以通过配置 config.json 实现下载指定目录，具体使用方法请看「<a href="https://github.com/DeppWang/youdaonote-pull?tab=readme-ov-file#4%E8%AE%BE%E7%BD%AE%E8%84%9A%E6%9C%AC%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-configjson" target="_blank" rel="noopener">这里</a>」。</p><p>效果示例：</p><p><img src="https://hexoblog.r2.depp.wang/20240618092919.png" alt=""></p><p>如果运行失败，可以根据错误日志排查。</p>]]></content:encoded>
      
      <comments>https://depp.wang/2024/simple-youdaonote-pull/#disqus_thread</comments>
    </item>
    
    <item>
      <title>为好软件付费</title>
      <link>https://depp.wang/2024/software-payment/</link>
      <guid>https://depp.wang/2024/software-payment/</guid>
      <pubDate>Sat, 15 Jun 2024 17:09:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;我看过一句话，想不起来出处了，大概意思是「最有价值的事是创造最棒的产品，而第二有价值的事是购买使用最棒的产品」。软件也是一种产品，同样适用这句话。&lt;/p&gt;
&lt;p&gt;年少的我也是白嫖党，随着年龄的增长，我逐渐转变思想，开始为好软件付费。每个人对好软件的标准不一样，我认为的好软件有这几个特点：经常使用、解决了特定的问题、同类软件使用体验最好。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>我看过一句话，想不起来出处了，大概意思是「最有价值的事是创造最棒的产品，而第二有价值的事是购买使用最棒的产品」。软件也是一种产品，同样适用这句话。</p><p>年少的我也是白嫖党，随着年龄的增长，我逐渐转变思想，开始为好软件付费。每个人对好软件的标准不一样，我认为的好软件有这几个特点：经常使用、解决了特定的问题、同类软件使用体验最好。</p> <a id="more"></a><p>人更愿意为看得见、摸得着的实体商品付费，如服饰鞋包、化妆品、电子产品。对于像软件这类虚拟商品，长期以来，微信/高德地图/抖音/百度等这类常用的软件是可以免费使用的，这可能是一个重要原因，导致我们潜意识就认为软件应该是免费的。</p><p>但软件这类虚拟商品的开发与维护也是需要成本的，有人力成本，也有运营成本。一个软件，你不需要付费就能使用，你就需要接受广告或你个人数据与行为被公司使用与出售的代价。正如 <a href="https://x.com/andlewis/status/24380177712" target="_blank" rel="noopener">Andrew Lewis 所说</a>，「如果你不需要为某产品付费，那么你就是那个产品本身」。公司付出的成本始终还是会从你身上赚回来，只是不是通过让你付费的方式。</p><p>当一个软件不向你展示广告，不出售你的个人数据。那它主要的盈利手段就是用户付费。</p><p>目前对于公司来说，通过购买软件来解决问题的方式越来越普遍。比如公司买云服务器来部署自己的产品，而不是自己购买物理服务器；购买飞书这类的产品来做企业内部沟通工具。</p><p>对于我们个体来说，我们不愿意向软件付费的还有一个重要原因，那就是现在很容易就能下载到破解软件，或者是盗版软件。在 Windows / Android / macOS 等平台，安装破解/盗版软件也很容易。人性使然，可以免费用，为什么还要付费。</p><p>如果你还没有自己的收入来源，你没有使用正版软件，倒也无可厚非。但当我们有了收入来源，使用破解/盗版软件，而省下的钱，我们用它做了什么？是买了杯奶茶，还是去下了个馆子。当我们收入不全是生活开支时，其它的支出就是消费，买奶茶是消费，下馆子也是消费，买正版软件也是消费。而购买的正版软件的最终体现的作用可能真的比一杯奶茶或者一顿美食更有价值。<strong>我们的消费支出中应该留给好软件付费留出位置</strong>。它和服饰鞋包、化妆品、电子产品等实体商品一样，值得我们付费。</p><p>消费促进经济，消费软件商品也可以促进经济。我们为软件付费，软件开发者可以靠自己的产品挣到钱，往大了说，这增加了就业机会，降低了失业率。购买正品软件是支持作者，同时也是潜在的支持我们自己，当更多人有了为好软件付费的意识，当你有产品需要用户付费时，你也能获得收入，甚至作为你主要收入来源。</p><p>我们换位思考，如果你是软件的开发者，你想你花费心血开发的付费软件被破解，被人免费使用吗？</p><p>我们使用破解/盗版软件其实也有一定的安全风险。网上有很多因为使用破解/盗版软件钱财被勒索或者被骗的案例。公司员工使用盗版软件，公司也有可能面临一定的法律风险。其实不少付费软件都有开源的软件可以替代，比如「Navicat Premium」有开源替代「<a href="https://github.com/dbeaver/dbeaver" target="_blank" rel="noopener">DBeaver</a>」。针对开源的软件，如果我们觉得不错，也可以为其赞赏，支持一下作者的付出。</p><p>我们通过付费来支持正版软件，我们当然也可以通过一些方式实现更具性价比的购买。以下是一些方式：</p><ul><li>软件开发者可能会在一些节日打折促销，如黑色星期五</li><li>很多软件可以多人合用一个账号（拼车），大家一起分摊费用。如 Netflix 可以在<a href="https://www.ihezu.cn/" target="_blank" rel="noopener">奈飞小铺</a>拼车</li><li>可以从国内的正版授权商购买（如<a href="https://www.lizhi.io/" target="_blank" rel="noopener">荔枝数码</a>），有的软件相比从官网买，有一定优惠。如 <a href="https://item.taobao.com/item.htm?id=663600199279&skuId=5114736058621" target="_blank" rel="noopener">Typora</a></li><li>不少软件有学生优惠，如果是在校学生，会有一定的折扣，如 Adobe 与 JetBrains 的软件</li><li>也有基于订阅模式的软件聚合平台，可以每月以固定的价格使用其平台包含的所有软件，如 <a href="https://setapp.com/" target="_blank" rel="noopener">SETAPP</a></li><li>不少软件在推广期会赠送一些授权码免费使用，或者价格很低就可以购入，在 V2EX 平台，就经常有这种软件推广</li><li>如果你积极参与开源，也可以免费使用的一些软件，如 JetBrains 的软件</li></ul><p>以下是我一些付费过与正在付费的软件：</p><p>付费过：</p><ol><li><a href="https://www.bypass.cn/" target="_blank" rel="noopener">分流抢票</a></li><li><a href="https://i.mi.com/" target="_blank" rel="noopener">小米云服务</a></li><li><a href="https://cloud.oppo.com/" target="_blank" rel="noopener">OPPO 云服务</a></li><li><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a></li><li><a href="https://yixi.tv/" target="_blank" rel="noopener">一席会员</a></li><li><a href="https://www.parallels.cn/" target="_blank" rel="noopener">Parallels</a></li><li><a href="https://dida365.com/" target="_blank" rel="noopener">滴答清单</a></li><li><a href="https://toolinbox.net/iPic/" target="_blank" rel="noopener">iPic</a></li><li><a href="https://github.com/features/copilot" target="_blank" rel="noopener">GitHub Copilot</a></li><li><a href="https://chatgpt.com/" target="_blank" rel="noopener">ChatGPT Plus</a></li><li><a href="https://raindrop.io/" target="_blank" rel="noopener">Raindrop.io</a></li><li><a href="https://www.nytimes.com/" target="_blank" rel="noopener">NYTimes</a></li><li><a href="https://x.com/i/premium_sign_up" target="_blank" rel="noopener">X(Twitter)</a></li><li><a href="https://www.apple.com/apple-arcade/" target="_blank" rel="noopener">Apple Arcade</a></li><li><a href="https://obsidian.md/sync" target="_blank" rel="noopener">Obsidian Sync</a></li><li><a href="https://firecore.com/infuse" target="_blank" rel="noopener">Infuse</a></li></ol><p>买断：</p><ol><li><a href="https://www.alfredapp.com/workflows/" target="_blank" rel="noopener">Alfred4 Workflows</a></li><li><a href="https://manico.im/" target="_blank" rel="noopener">Manico</a></li><li><a href="https://apps.apple.com/us/app/pphub-for-github-developer/id1314212521" target="_blank" rel="noopener">PPHub</a></li><li><a href="https://workingcopyapp.com/" target="_blank" rel="noopener">Working Copy</a></li><li><a href="https://apps.apple.com/us/app/shadowrocket/id932747118" target="_blank" rel="noopener">Shadowrocket</a></li><li><a href="https://apps.apple.com/us/app/stash-rule-based-proxy/id1596063349" target="_blank" rel="noopener">Stash</a></li><li><a href="https://typora.io/" target="_blank" rel="noopener">Typora</a></li></ol><p>正在付费：</p><ul><li><a href="https://plus.jd.com/" target="_blank" rel="noopener">京东 Plus</a></li><li><a href="https://www.bilibili.com/" target="_blank" rel="noopener">BiliBili 大会员</a></li><li><a href="https://www.netflix.com/" target="_blank" rel="noopener">Netflix</a></li><li><a href="https://zh.okaapps.com/product/1659622164" target="_blank" rel="noopener">VidHub</a></li><li><a href="https://bandwagonhost.com/" target="_blank" rel="noopener">搬瓦工 VPS</a></li><li><a href="https://www.apple.com/apple-music/" target="_blank" rel="noopener">Apple Music</a></li><li><a href="https://www.icloud.com/" target="_blank" rel="noopener">美区 iCloud</a></li><li><a href="https://www.cloudflare.com/products/argo-smart-routing/" target="_blank" rel="noopener">Cloudflare - Argo Smart Routing</a></li></ul><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://retompi.com/archived-blog/posts/2019/12/02/we-should-use-genuine-softwares.html" target="_blank" rel="noopener">喝奶茶或买软件，你选哪一个？</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2024/software-payment/#disqus_thread</comments>
    </item>
    
    <item>
      <title>实现 GPT-4o 使用自由</title>
      <link>https://depp.wang/2024/gpt4o-free-use/</link>
      <guid>https://depp.wang/2024/gpt4o-free-use/</guid>
      <pubDate>Tue, 11 Jun 2024 13:11:41 GMT</pubDate>
      <description>
      
        &lt;p&gt;国外大语言模型三方评测网站 &lt;a href=&quot;https://artificialanalysis.ai/models&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Artificial Analysis&lt;/a&gt; 的评测结果显示：GPT-4o 质量是目前所有大语言模型中最好的，速度比 GPT-3.5 Turbo 快，API 的价格相比 GPT-4 也降低了一半。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hexoblog.r2.depp.wang/20240611190755.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>国外大语言模型三方评测网站 <a href="https://artificialanalysis.ai/models" target="_blank" rel="noopener">Artificial Analysis</a> 的评测结果显示：GPT-4o 质量是目前所有大语言模型中最好的，速度比 GPT-3.5 Turbo 快，API 的价格相比 GPT-4 也降低了一半。</p><p><img src="https://hexoblog.r2.depp.wang/20240611190755.png" alt=""></p><a id="more"></a><h2 id="有网络条件，可以免费使用-GPT-4o"><a href="#有网络条件，可以免费使用-GPT-4o" class="headerlink" title="有网络条件，可以免费使用 GPT-4o"></a>有网络条件，可以免费使用 GPT-4o</h2><p>目前有一些方式可以免费使用 GPT-4o，但都有自己的局限性。</p><ol><li><p>ChatGPT 注册用户在<a href="https://chatgpt.com/" target="_blank" rel="noopener">网页端</a>与客户端每日可以免费限量使用。这种方式对网络要求比较高</p></li><li><p><a href="https://poe.com/GPT-4o" target="_blank" rel="noopener">Poe</a> 网络要求相对低一点，但每天只能免费使用 10 次</p></li><li><p><a href="https://copilot.microsoft.com/" target="_blank" rel="noopener">Microsoft Copilot</a> 可免费使用，手机客户端网络要求低点，网页端的网络要求比较高</p><p><a href="https://www.coze.com/home" target="_blank" rel="noopener">Coze</a> 通过配置自定义机器人的方式显示可以免费使用 GPT-4o，但我实际测试发现其模型应该是 GPT-3.5。</p></li></ol><p><img src="https://hexoblog.r2.depp.wang/20240611210411.png" alt=""></p><h2 id="没有网络条件，可以通过-API-Key-使用-GPT-4o"><a href="#没有网络条件，可以通过-API-Key-使用-GPT-4o" class="headerlink" title="没有网络条件，可以通过 API Key 使用 GPT-4o"></a>没有网络条件，可以通过 API Key 使用 GPT-4o</h2><p>如果你能解决网络问题，ChatGPT 注册用户的免费额度应该够你用了。如果你不能解决网络问题，那可以通过 API Key 的方式来使用。</p><p>如果你没有 OpenAI 的 API Key，你可以在专门售卖的 OpenAI API 能力的服务商处购买，如 <a href="https://aiproxy.io/pricing" target="_blank" rel="noopener">aiproxy.io</a>。直接充值积分。我在这个服务商买过，价格还是比较合理，也是真的 OpenAI 的 API。</p><p>建议自己搭建一个基于 API Key 自用的网页服务来使用，使用其它人搭建的网页服务还是有一定的 API Key 泄露的风险。</p><p>目前可以搭建基于 API Key 的网页服务的开源项目有很多，我使用的 <a href="https://github.com/Yidadaa/ChatGPT-Next-Web" target="_blank" rel="noopener">ChatGPT-Next-Web</a>，它可以一键部署到  <a href="https://vercel.com/" target="_blank" rel="noopener">Vercel</a> 上。Vercel 每月有一定的额度可以免费使用，我们不用另外购买云主机。因为 Vercel 是国外公司，所以你国内访问时，网络性能不是很好。你可以利用自定义域名，使用 <a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">Cloudflare</a> 免费配置域名转发，加快国内网络访问的速度。</p><p>以下是我基于 ChatGPT-Next-Web 搭建的自用网页服务，部署在 Vercel 上，使用了自定义域名 <a href="https://chatgpt.depp.wang" target="_blank" rel="noopener">https://chatgpt.depp.wang</a></p><p><img src="https://hexoblog.r2.depp.wang/20240611201010.png" alt=""></p><p>区分 GPT-3.5 和 GPT-4o 可以问：「为什么父母结婚没有邀请我」，GPT-4o 会回答可能因为你还没有出生。也可以直接问它是不是基于 GPT-4o。</p><p>如果你想免费使用 API Key。你可以通过申请试用 Mircosoft Azure 的  <a href="https://azure.microsoft.com/en-us/products/ai-services/openai-service/" target="_blank" rel="noopener">OpenAI 服务</a>实现。有 2 个条件：</p><ol><li>你是新注册用户</li><li>需要公司信息，公司要有官网地址</li></ol><h2 id="国内网络使用-GPT3-5-或国内大语言模型"><a href="#国内网络使用-GPT3-5-或国内大语言模型" class="headerlink" title="国内网络使用 GPT3.5 或国内大语言模型"></a>国内网络使用 GPT3.5 或国内大语言模型</h2><p>如果你日常对模型要求没有那么高，你可以通过 ChatGPT-Next-Web 使用 GPT-3.5，目前 GPT-3.5 API 的价格还是很便宜的，可能比你去某些网站注册买会员更便宜。你也可以使用国内网络条件就可以直接用的国内公司开发的大语言模型。比如：</p><ul><li><a href="https://www.coze.cn/" target="_blank" rel="noopener">扣子</a> - 字节跳动推出的 AI Bot 开发平台</li><li><a href="https://www.doubao.com/" target="_blank" rel="noopener">豆包</a> - 抖音旗下 AI 智能助手</li><li><a href="https://tongyi.aliyun.com/qianwen/" target="_blank" rel="noopener">通义千问</a>- 阿里巴巴开发的 AI 大语言模型</li><li><a href="https://yuanbao.tencent.com/chat" target="_blank" rel="noopener">元宝</a> - 腾讯开发的 AI 大语言模型</li><li><a href="https://yiyan.baidu.com/" target="_blank" rel="noopener">文心一言</a> - 百度开发的 AI 大语言模型</li><li><a href="https://hailuoai.com/" target="_blank" rel="noopener">海螺 AI</a> - MiniMax 旗下的 AI 产品</li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2024/gpt4o-free-use/#disqus_thread</comments>
    </item>
    
    <item>
      <title>从 FastAPI 说起，理解 Python 异步 IO 的原理</title>
      <link>https://depp.wang/2024/python-async-io/</link>
      <guid>https://depp.wang/2024/python-async-io/</guid>
      <pubDate>Sun, 02 Jun 2024 16:27:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;因为 Python 是解释型语言，当使用 Python 做后端开发时，如 Python + Django，相比 Java + Spring，其响应时间会长一点，但只要代码合理，差别也不太大。但 Django 即使使用多进程模式，其并发处理能力还是会差不少。Python 有一些提升并发处理能力的方案，比如使用异步框架 FastAPI，借助其异步能力，可以大大提升 IO 密集型任务的并发处理能力。FastAPI 算是&lt;a href=&quot;https://www.techempower.com/benchmarks/#hw=ph&amp;test=query&amp;section=data-r22&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;最快的 Python 框架之一&lt;/a&gt;。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>因为 Python 是解释型语言，当使用 Python 做后端开发时，如 Python + Django，相比 Java + Spring，其响应时间会长一点，但只要代码合理，差别也不太大。但 Django 即使使用多进程模式，其并发处理能力还是会差不少。Python 有一些提升并发处理能力的方案，比如使用异步框架 FastAPI，借助其异步能力，可以大大提升 IO 密集型任务的并发处理能力。FastAPI 算是<a href="https://www.techempower.com/benchmarks/#hw=ph&test=query&section=data-r22" target="_blank" rel="noopener">最快的 Python 框架之一</a>。</p><a id="more"></a><h2 id="FastAPI"><a href="#FastAPI" class="headerlink" title="FastAPI"></a>FastAPI</h2><p>我们先简单看看 FastAPI 怎么用。</p><h3 id="示例-1：默认网络异步-IO"><a href="#示例-1：默认网络异步-IO" class="headerlink" title="示例 1：默认网络异步 IO"></a>示例 1：默认网络异步 IO</h3><p>安装：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m venv venv</span><br><span class="line">. ./venv/bin/activate</span><br><span class="line">pip install fastapi</span><br></pre></td></tr></table></figure><p>简单的 Server 端代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Union</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_root</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"Hello"</span>: <span class="string">"World"</span>&#125;</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uvicorn main:app --reload</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://hexoblog.r2.depp.wang/20240602232755.png" alt=""></p><p>我们可以看出，FastAPI 的接口相比其它框架，写法只是多了个 async 关键字，async 定义接口是异步的。</p><p>单从返回结果中看不出来 FastAPI 与其它 Python 框架的区别。区别在于并发访问时，FastAPI 的服务器线程处理路由请求，如 <code>http://127.0.0.1:8000/</code>，如果遇到网络 IO，不再等待网络 IO，而是去处理其它请求，当网络 IO 完成时，再恢复继续执行，这个异步能力提升了对 IO 密集型任务的处理能力。</p><h3 id="示例-2：显式网络异步-IO"><a href="#示例-2：显式网络异步-IO" class="headerlink" title="示例 2：显式网络异步 IO"></a>示例 2：显式网络异步 IO</h3><p>再看另一个示例，在业务代码中，显式的发起异步网络请求，这个网络 IO，如同路由请求一样，FastAPI 也会异步的处理。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException</span><br><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步 GET 请求示例</span></span><br><span class="line"><span class="meta">@app.get("/external-api")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">call_external_api</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://jsonplaceholder.typicode.com/posts/1"</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient() <span class="keyword">as</span> client:</span><br><span class="line">        response = <span class="keyword">await</span> client.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code != <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">raise</span> HTTPException(status_code=response.status_code, detail=<span class="string">"Failed to fetch data"</span>)</span><br><span class="line">        <span class="keyword">return</span> response.json()</span><br></pre></td></tr></table></figure><p><img src="https://hexoblog.r2.depp.wang/20240602215253.png" alt=""></p><p>如果想数据库 IO 异步，需要数据库驱动或 ORM 支持异步操作。</p><h2 id="异步-IO"><a href="#异步-IO" class="headerlink" title="异步 IO"></a>异步 IO</h2><p>FastAPI 异步的核心实现是「异步 IO」，我们可以不用 FastAPI，直接使用异步 IO 来启动一个有异步处理能力的 Server。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>) <span class="comment"># 模拟 I/O 操作</span></span><br><span class="line">    <span class="keyword">return</span> web.Response(text=<span class="string">'&#123;"Hello": "World"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(loop)</span>:</span></span><br><span class="line">    <span class="comment"># 使用事件循环监控 web 请求</span></span><br><span class="line">    app = web.Application(loop=loop)</span><br><span class="line">    app.router.add_route(<span class="string">'GET'</span>, <span class="string">'/'</span>, index)</span><br><span class="line">    <span class="comment"># 启动 server，事件循环监控处理 web 请求</span></span><br><span class="line">    srv = <span class="keyword">await</span> loop.create_server(app.make_handler(), <span class="string">'127.0.0.1'</span>, <span class="number">8000</span>)</span><br><span class="line">    print(<span class="string">'Server started at http://127.0.0.1:8000...'</span>)</span><br><span class="line">    <span class="keyword">return</span> srv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显式获取一个事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 启动事件循环</span></span><br><span class="line">loop.run_until_complete(init(loop))</span><br><span class="line">loop.run_forever()</span><br></pre></td></tr></table></figure><p>启动这个示例， <code>http://127.0.0.1:8000/</code> 返回结果跟示例 1 一样。</p><p>异步 IO 的底层实现原理是「协程」与「事件循环」。</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>) <span class="comment"># 模拟 I/O 操作</span></span><br><span class="line">    <span class="keyword">return</span> web.Response(text=<span class="string">'&#123;"Hello": "World"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br></pre></td></tr></table></figure><p>index 使用  <code>async def</code>  定义，代表它是一个协程。<code>await</code> 用于 I/O 操作前，告诉执行线程不用等待这个 IO 操作。正常函数的调用是通过栈实现，函数只能依次调用执行。而协程 （coroutine）是一种特殊的函数（不是协作的线程），它可以让线程在 await 标记处暂停执行，转而执行其它任务，当 IO 操作完全时，再继续执行。</p><p>我们看看多个协程并发执行的效果。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coroutine3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f"Coroutine 3 started at <span class="subst">&#123;datetime.now()&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)  <span class="comment"># 模拟 I/O 操作</span></span><br><span class="line">    print(<span class="string">f"Coroutine 3 finished at <span class="subst">&#123;datetime.now()&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coroutine2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f"Coroutine 2 started at <span class="subst">&#123;datetime.now()&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)  <span class="comment"># 模拟 I/O 操作</span></span><br><span class="line">    print(<span class="string">f"Coroutine 2 finished at <span class="subst">&#123;datetime.now()&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coroutine1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f"Coroutine 1 started at <span class="subst">&#123;datetime.now()&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)  <span class="comment"># 模拟 I/O 操作</span></span><br><span class="line">    print(<span class="string">f"Coroutine 1 finished at <span class="subst">&#123;datetime.now()&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Main started"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建任务，让协程并发执行</span></span><br><span class="line">    task1 = asyncio.create_task(coroutine1())</span><br><span class="line">    task2 = asyncio.create_task(coroutine2())</span><br><span class="line">    task3 = asyncio.create_task(coroutine3())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待所有任务完成</span></span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line">    <span class="keyword">await</span> task3</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Main finished"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行主协程</span></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Main started</span><br><span class="line">Coroutine 1 started at 2024-06-03 10:28:00.665051</span><br><span class="line">Coroutine 2 started at 2024-06-03 10:28:00.665076</span><br><span class="line">Coroutine 3 started at 2024-06-03 10:28:00.665087</span><br><span class="line">Coroutine 1 finished at 2024-06-03 10:28:01.665265</span><br><span class="line">Coroutine 2 finished at 2024-06-03 10:28:01.665310</span><br><span class="line">Coroutine 3 finished at 2024-06-03 10:28:01.665319</span><br><span class="line">Main finished</span><br></pre></td></tr></table></figure><p>我们可以看出，线程没有依次执行 3 个任务，遇到 IO 操作时，转而执行了其它任务。等 IO 操作完成后，再接着执行。也可以看出线程 3 个协程基本是同时开启等待 I/O 操作的，所以最终执行完成时间基本相同。</p><p>虽然这里没有显式使用事件循环，但 <code>asyncio.run</code> 会隐式的使用使用事件循环。</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>协程是通过生成器实现的。生成器可以让函数执行暂停，也可以让函数执行恢复。也就是协程的特点。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_generator</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"First value"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">"Second value"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    print(<span class="string">"Third value"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># simple_generator 是生成器函数, gen 是生成器</span></span><br><span class="line">gen = simple_generator() </span><br><span class="line"></span><br><span class="line">print(next(gen))  <span class="comment"># 输出: First value \n 1</span></span><br><span class="line">print(next(gen))  <span class="comment"># 输出: Second value \n 2</span></span><br><span class="line">print(next(gen))  <span class="comment"># 输出: Third value \n 3</span></span><br></pre></td></tr></table></figure><p>使用 <code>next()</code> 运行生成器时，遇到 <code>yield</code> 时，它将暂停，next() 再次运行时，会接着上次暂停的 yield 处继续运行。Python 3.5 以前的协程写法也是使用「注解」+ <code>yeild</code>，3.5 开始使用 <code>async def</code> + <code>await</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_coroutine</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Start coroutine"</span>, datetime.now())</span><br><span class="line">    <span class="comment"># 异步调用 asyncio.sleep(1):</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"End coroutine"</span>, datetime.now())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 EventLoop</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 执行 coroutine</span></span><br><span class="line">loop.run_until_complete(my_coroutine())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>生成器的运行暂停与恢复的特点，除了做协程，还可以做不少事，可以边循环边计算，存放算法，比如实现一个杨辉三角（每一行的两端都是 1，其他位置的数字是它上方两个数字之和）。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yanghui_triangle</span><span class="params">()</span>:</span></span><br><span class="line">    row = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> row</span><br><span class="line">        new_row = [<span class="number">1</span>]  <span class="comment"># 每一行的第一个元素总是 1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(row)):</span><br><span class="line">            new_row.append(row[i - <span class="number">1</span>] + row[i])</span><br><span class="line">        new_row.append(<span class="number">1</span>)  <span class="comment"># 每一行的最后一个元素总是 1</span></span><br><span class="line">        row = new_row</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成并打印前 5 行杨辉三角</span></span><br><span class="line">triangle = yanghui_triangle()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(next(triangle))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>协程执行可以暂停，那协程何时恢复执行，这就需要使用事件循环来告诉执行线程。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 EventLoop</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 事件循环执行 coroutine</span></span><br><span class="line">loop.run_until_complete(my_coroutine())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>事件循环是使用 IO 多路复用技术，一直循环监控协程可以继续执行的事件，当可以执行时，线程继续执行协程。</p><h3 id="IO-多路复用技术"><a href="#IO-多路复用技术" class="headerlink" title="IO 多路复用技术"></a>IO 多路复用技术</h3><p>通俗理解 IO 多路复用：我是快递站点老板，我不用主动问每个快递员的任务完成情况，而是快递员自己完成任务后，主动通过我。这提高了我处理任务的能力，我这个老板可以做更多的事。</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+--------+  +--------+  +--------+</span><br><span class="line">|<span class="string">快递员 A</span>|<span class="string">--&gt;</span>|<span class="string">快递员 B</span>|<span class="string">--&gt;</span>|<span class="string">快递员 C</span>|</span><br><span class="line">|<span class="string">任务完成</span>|<span class="string">   </span>|<span class="string">任务完成</span>|<span class="string">   </span>|<span class="string">任务完成</span>|</span><br><span class="line">+--------+  +--------+  +--------+</span><br><span class="line">       \        |<span class="string">         /</span></span><br><span class="line"><span class="string">        \       </span>|<span class="string">        /</span></span><br><span class="line"><span class="string">         \      </span>|<span class="string">       /</span></span><br><span class="line"><span class="string">          \     </span>|<span class="string">      /</span></span><br><span class="line"><span class="string">           \    </span>|<span class="string">     /</span></span><br><span class="line"><span class="string">            \   </span>|<span class="string">    /</span></span><br><span class="line"><span class="string">             \  </span>|<span class="string">   /</span></span><br><span class="line"><span class="string">              \ </span>|<span class="string">  /</span></span><br><span class="line"><span class="string">               \</span>|<span class="string"> /</span></span><br><span class="line"><span class="string">                V</span></span><br><span class="line"><span class="string">            +-------+</span></span><br><span class="line"><span class="string">            </span>|<span class="string">等待通知</span>|</span><br><span class="line">            +-------+</span><br><span class="line">                |</span><br><span class="line"><span class="string">                V</span></span><br><span class="line"><span class="string">            +-------+</span></span><br><span class="line"><span class="string">            </span>|<span class="string">处理任务</span>|</span><br><span class="line">            +-------+</span><br></pre></td></tr></table></figure><p>select、poll、epoll 都能实现  IO 多路复用，相比 select、poll，epoll 的性能更好。Linux 一般默认使用 epoll，macOS 使用 kqueue，类似于 epoll，跟 epoll 性能差不多。</p><h3 id="Socket-服务器使用事件循环"><a href="#Socket-服务器使用事件循环" class="headerlink" title="Socket 服务器使用事件循环"></a>Socket 服务器使用事件循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> selectors</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 selectors 对象，相于 epoll 的实现，Linux 中运行的话</span></span><br><span class="line">sel = selectors.DefaultSelector()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求接收事件处理函数。接受新的连接并注册读事件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accept</span><span class="params">(sock, mask)</span>:</span></span><br><span class="line">    conn, addr = sock.accept()  <span class="comment"># 接受连接</span></span><br><span class="line">    print(<span class="string">'Accepted connection from'</span>, addr)</span><br><span class="line">    conn.setblocking(<span class="keyword">False</span>)</span><br><span class="line">    sel.register(conn, selectors.EVENT_READ, read)  <span class="comment"># 注册读取事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求读取事件处理函数。读取请求数据并发送 HTTP 响应，之后关闭连接。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(conn, mask)</span>:</span></span><br><span class="line">    data = conn.recv(<span class="number">100</span>)  <span class="comment"># 从连接中读取数据</span></span><br><span class="line">    print(<span class="string">'response to'</span>)</span><br><span class="line">    response = <span class="string">"HTTP/1.1 200 OK\r\n"</span> \</span><br><span class="line">            <span class="string">"Content-Type: application/json\r\n"</span> \</span><br><span class="line">            <span class="string">"Content-Length: 18\r\n"</span> \</span><br><span class="line">            <span class="string">"Connection: close\r\n"</span> \</span><br><span class="line">            <span class="string">"\r\n"</span> \</span><br><span class="line">            <span class="string">"&#123;\"Hello\": \"World\"&#125;"</span></span><br><span class="line">    conn.send(response.encode())  <span class="comment"># 回显数据</span></span><br><span class="line">    print(<span class="string">'Closing connection'</span>)</span><br><span class="line">    sel.unregister(conn)  <span class="comment"># 注销事件</span></span><br><span class="line">    conn.close()  <span class="comment"># 关闭连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个服务器 socket</span></span><br><span class="line">sock = socket.socket()</span><br><span class="line">sock.bind((<span class="string">'localhost'</span>, <span class="number">8000</span>))</span><br><span class="line">sock.listen()</span><br><span class="line">sock.setblocking(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册 accept 事件</span></span><br><span class="line">sel.register(sock, selectors.EVENT_READ, accept)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Server is running on port 8000..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 当没有请求时，这里会阻塞</span></span><br><span class="line">    events = sel.select()  <span class="comment"># 选择已准备好的文件描述符（事件）</span></span><br><span class="line">    print(<span class="string">"events length: "</span>, len(events))</span><br><span class="line">    <span class="keyword">for</span> key, mask <span class="keyword">in</span> events:</span><br><span class="line">        callback = key.data  <span class="comment"># 获取事件处理函数</span></span><br><span class="line">        print(<span class="string">"事件函数名:"</span>, callback.__name__)</span><br><span class="line">        callback(key.fileobj, mask)  <span class="comment"># 调用事件处理函数</span></span><br></pre></td></tr></table></figure><p>启动服务器 Socket，监控指定端口。如果运行在 Linux 系统上，selectors 默认使用 epoll 作为其实现。代码使用 epoll 注册一个请求接收事件（accept 事件）。当有新的请求到来时，epoll 会触发并执行该事件处理函数，同时注册一个读取事件（read 事件）用于处理和响应请求数据。</p><p>当 WEB 端使用 <a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a> 访问时，返回结果与示例 1 一样，Server 运行日志：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Server is running on port 8000...</span><br><span class="line">events length:  1</span><br><span class="line">事件函数名: accept</span><br><span class="line">Accepted connection from ('127.0.0.1', 60941)</span><br><span class="line">events length:  1</span><br><span class="line">事件函数名: read</span><br><span class="line">response to</span><br><span class="line">Closing connection</span><br></pre></td></tr></table></figure><h3 id="Socket-服务器"><a href="#Socket-服务器" class="headerlink" title="Socket 服务器"></a>Socket 服务器</h3><p>直接使用 Socket 启动一个 Server，浏览器使用 <a href="http://127.0.0.1:8080/" target="_blank" rel="noopener">http://127.0.0.1:8080/</a> 访问或使用 <code>curl http://127.0.0.1:8080/</code> 返回 <code>{&quot;Hello&quot;: &quot;World&quot;}</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 TCP socket</span></span><br><span class="line">server_socket = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 socket 绑定到指定的IP地址和端口号</span></span><br><span class="line">server_socket.bind((<span class="string">'127.0.0.1'</span>, <span class="number">8001</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始监听传入连接</span></span><br><span class="line">server_socket.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环接受客户端连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"%s Waiting for a connection..."</span> % datetime.now())</span><br><span class="line">    client_socket, addr = server_socket.accept() <span class="comment"># 这里会阻塞，等待客户端连接</span></span><br><span class="line">    print(<span class="string">f"<span class="subst">&#123;datetime.now()&#125;</span> Got connection from <span class="subst">&#123;addr&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收客户端数据</span></span><br><span class="line">    data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">f"Received: <span class="subst">&#123;data.decode()&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送响应数据</span></span><br><span class="line">    response = <span class="string">"HTTP/1.1 200 OK\r\n"</span> \</span><br><span class="line">               <span class="string">"Content-Type: application/json\r\n"</span> \</span><br><span class="line">               <span class="string">"Content-Length: 18\r\n"</span> \</span><br><span class="line">               <span class="string">"Connection: close\r\n"</span> \</span><br><span class="line">               <span class="string">"\r\n"</span> \</span><br><span class="line">               <span class="string">"&#123;\"Hello\": \"World\"&#125;"</span></span><br><span class="line">               </span><br><span class="line">    client_socket.sendall(response.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭客户端套接字</span></span><br><span class="line">    client_socket.close()</span><br></pre></td></tr></table></figure><p><code>curl http://127.0.0.1:8001/</code> 访问，Server 运行日志：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2024-06-03 09:53:36.711732 Waiting for a connection...</span><br><span class="line">2024-06-03 09:54:30.715928 Got connection from ('127.0.0.1', 64361)</span><br><span class="line">Received: GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8001</span><br><span class="line">User-Agent: curl/8.4.0</span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2024-06-03 09:54:30.716046 Waiting for a connection...</span><br></pre></td></tr></table></figure><h2 id="一句话总结"><a href="#一句话总结" class="headerlink" title="一句话总结"></a>一句话总结</h2><p>异步 IO 底层使用「协程」与「事件循环」实现。「协程」保证当线程执行时遇到标记的 IO 操作时，可以不用等待 IO 完成，而是暂停，让线程可以执行其他任务，不阻塞线程。「事件循环」使用 IO 多路复用技术，一直循环监控 IO 事件，当某个 IO 事件完成时，触发对应的回调，使协程继续执行。</p><p><img src="https://hexoblog.r2.depp.wang/1_50wqD04jyUiujKlIgQY47w.webp" alt=""></p><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><ul><li><a href="https://fastapi.tiangolo.com/zh/async/" target="_blank" rel="noopener">FastAPI - 并发 async / await</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017959540289152" target="_blank" rel="noopener">廖雪峰 - Python 教程 - 异步 IO</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2024/python-async-io/#disqus_thread</comments>
    </item>
    
    <item>
      <title>我家的装修设计</title>
      <link>https://depp.wang/2024/decoration-design/</link>
      <guid>https://depp.wang/2024/decoration-design/</guid>
      <pubDate>Mon, 27 May 2024 05:01:54 GMT</pubDate>
      <description>
      
        &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/kXnn_NE86vI?si=5XAHE2cZW-nyxx6R&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;分享一下我家装修设计的一些经验。我是去年装修的，已经入住了，现在对装修结果还是比较满意。&lt;/p&gt;
&lt;p&gt;现在每个年轻人基本都会经历一下房子装修的过程，我在经历这个过程后，觉得还是有一些东西值得分享。&lt;/p&gt;
&lt;p&gt;我房子面积不大，所以对房子的设计没有去追求设计感，而是更多注重空间的利用性与功能的实用性。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/kXnn_NE86vI?si=5XAHE2cZW-nyxx6R" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>分享一下我家装修设计的一些经验。我是去年装修的，已经入住了，现在对装修结果还是比较满意。</p><p>现在每个年轻人基本都会经历一下房子装修的过程，我在经历这个过程后，觉得还是有一些东西值得分享。</p><p>我房子面积不大，所以对房子的设计没有去追求设计感，而是更多注重空间的利用性与功能的实用性。</p><a id="more"></a><p>有两个人的对我的装修设计影响比较大，一个是「齐洪海」，他在一席上分享了他的「<a href="https://yixi.tv/#/speech/detail?id=992" target="_blank" rel="noopener">家设计指南</a>」，让我了解到了一些原来没有意识到的思想，比如：「设计的实现不是在竣工的那一刻，而是在设计使用了一段时间以后」、比如：「家居设计中，入口区域的技术含量是最高的」。另一个是「<a href="https://space.bilibili.com/409883855?spm_id_from=333.337.0.0" target="_blank" rel="noopener">吉设计师</a>」，他是我通过<a href="https://www.bilibili.com/video/BV1Ca411g7Ko/" target="_blank" rel="noopener">麦克老师的视频</a>了解到的，后面我找他做了平面设计优化，他给我出了 2 个很好的方案，他的一些设计思路的也是我自己完全没有想到的。</p><h2 id="平面设计优化"><a href="#平面设计优化" class="headerlink" title="平面设计优化"></a>平面设计优化</h2><p>我房子的原始户型比较差，大门对着卧室门；生活阳台主要当过道了，空间比较浪费；卫生间很小，无法做三分离。</p><p><img src="https://hexoblog.r2.depp.wang/20240527161357.png" alt=""></p><p>我通过看小红书设计和自己琢磨，设计了一下户型。主要包括厨房从生活阳台借点空间，做成 U 型；生活阳台门从卫生间开；入户设计个玄关遮挡。但由于卫生间的面积太小，想做 3 段式实在有点捉襟见处。为了有更多的储藏，我设计了主卧床靠墙，使用也不太方便。</p><p><img src="https://hexoblog.r2.depp.wang/20240527161454.png" alt=""></p><p>所以我对吉设计师提出的诉求主要是卫生间这块的，希望能做成三段式，另外就是储藏多一点。他给我出了 2 套方案，第一套方案的卫生间设计我很喜欢， 将淋浴区域当过道，很有想像力的一个点。</p><p><img src="https://hexoblog.r2.depp.wang/20240527164751.png" alt=""></p><p>他后面又给我出了一个大胆的方案，将原来的厨房区域设计为卫生间，卫生间与生活阳台区域设计为开放式厨房。</p><p><img src="https://hexoblog.r2.depp.wang/20240527164913.png" alt=""></p><p>我认真考虑过这个方案，但由于厨房没有像卫生间那样有下沉空间，排水不能做坡度，只能使用扁型排水管，这对排水能力有一定影响，后期可能会堵。也只能使用墙排马桶，这降低了马桶的选择范围。厨房设计成开放式，如果想更好的隔绝油烟效果，需要使用玻璃等，这增大的施工难度与预算。但我对卧室这边的设计很满意，卧室门改了位置，不再对入户门，也有了 2 个 1.6 米宽的储藏空间，同时床也不挨着墙，更实用。</p><p>所以我选择吸收 2 个方案各自好的一部分设计，将其合为了一个方案。在这个方案上，我也做了一些适合自己的设计。接下来我会先说一下我家的电源/灯光与全屋智能设计，再针对我家空间，依次说下入口、卫生间、生活阳台、厨房、厅、卧室这 6 个空间的设计。</p><p><img src="https://hexoblog.r2.depp.wang/20240527165030.png" alt=""></p><h2 id="电源-灯光与全屋智能设计"><a href="#电源-灯光与全屋智能设计" class="headerlink" title="电源/灯光与全屋智能设计"></a>电源/灯光与全屋智能设计</h2><p>电源/灯光与全屋智能设计也其实对应的就是装修阶段的水电设计，一般来说，灯光设计决定你是否需要吊顶，我没有追求无主灯设计而全屋吊顶，基本没怎么吊顶，参观了不少同户型设计后，我使用了明装筒灯与射灯，客厅也装了主灯。</p><table><thead><tr><th>客厅灯</th><th>餐厅灯</th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/EDA39263-52FC-455A-854A-D6A42AF97637_1_105_c.jpeg" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/BF553095-7A29-4F5A-829D-7568B362A4C1_1_105_c.jpeg" alt=""></td></tr></tbody></table><p>电源这方面，我插座设计的得还是比较多的，我先说几个个人觉得设计得还比较好的插座，其它的一些插座设计后面我也会提到。首先，在镜柜这里设计了一个插座，方便给剃须刀与电动牙刷充电，这是从齐洪海的分享中学到的。在沙发上方也设计了一个插座，这个插座使用频率还很高，因为位置比较方便。阳台这里也设计了一个插座，冬天在这里打手搓麻将时，可以插上小太阳暖脚，平时阳台用电脑时也可以充电。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/46EC5279-B206-4D9C-B395-AF87DADAFCE4_1_105_c.jpeg" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/9FF126B8-7F6F-4BB3-822E-C0B493A27094_1_105_c.jpeg" alt="">)<img src="https://hexoblog.r2.depp.wang/154D4840-284C-4140-9AA8-182F837D134A_1_105_c.jpeg" alt=""></td></tr></tbody></table><p>全屋智能这块其实设计也比较简单，主要分为 2 块，1 块是全屋 WIFI ，1 块是智能开关。</p><table><thead><tr><th>全屋 WIFI</th><th>智能开关</th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/20240527121026.png" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/20240527121110.png" alt=""></td></tr></tbody></table><p>全屋 WIFI 是用的 Mesh 组网，效果就是有多个路由器，但只有一个 WIFI，根据你的位置它自动连接信号好的那个。</p><p>智能开关的好处是可以语音控制，也可以实现远程控制。我智能开关使用的是绿米的零火智能开关，我没有做双控，每个灯就一个开关，开关都是设计在进门的外面，进门可以手动开，关一般就用语音控制，买了个小爱触屏音箱。</p><p>智能家居我使用的米家生态，它的性价比高一点，可以接入设备也更多一点。部分设备也支持 HomeKit。</p><h2 id="入口设计"><a href="#入口设计" class="headerlink" title="入口设计"></a>入口设计</h2><p>齐洪海说设计入口的技术含量最高，我也比较认同。他列出了在入口会发生的一些行为和入口区域会储藏的一些物品。</p><p><img src="https://hexoblog.r2.depp.wang/7.jpg" alt=""></p><p>我家因为没有没有专门的玄关区域，所以无法实现太多的功能，比如放自行车等。但也尽力实现了一些功能。去掉了进门右手边这面墙的一半，拥有了一个 50cm 深的储藏空间，上部分放行李箱，中间做挂衣区，挂外出会穿的雨衣和外套，常用包与购物袋也会放这里，下面改造为会抽屉，放不常穿的鞋。柜门内嵌了一面镜子，但因为柜门的高度问题，镜子稍微有点矮。这里有个我觉得可以注意的点，如果你鞋柜留悬空区，悬空区不要太深了，跟你鞋长差不多就行，这样穿鞋比较方便。</p><table><thead><tr><th>入口</th><th>柜子</th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/41F1D5E0-0887-404F-A505-9EA2E8C141D1_1_105_c.jpeg" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/697E2233-0A5E-41BD-A79A-CE603105FC5C_1_105_c.jpeg" alt=""></td></tr></tbody></table><p>入口区域我原来是一直想设计个可以坐着穿鞋的凳子的，但因为空间不太够用，最后就放弃了。现在觉得鞋凳确实也没有必要，一般也很少坐着穿鞋。但因为右边柜体深度只有 27cm 左右，所以鞋柜隔板只能倾斜，但悬空区域 27cm 深度对我来说刚刚好，我是 40 码的鞋。后面我的木工师傅告诉我，其实可以将墙体再打薄一点，这样鞋柜隔板就不用倾斜。</p><p>我在小红书上看到的这种餐桌可内嵌的餐边柜，比较适合我家入口这块区域，所以这块区域就采用了这个设计。</p><table><thead><tr><th>小红书餐边柜</th><th>餐边柜</th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/8.jpg" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/328BBC07-1598-425E-827C-5751EA4E4DB0_1_105_c.jpeg" alt=""></td></tr></tbody></table><p>进门右边区域储藏放鞋等差不多，但出门运动的物品，比如篮球，还是没有地方放。所以运动物品就放到餐边柜左边的下半部分储藏空间中了。这里做了 2 个小的设计，一是为了拿取物品的方便，下面柜门的方向放到了外侧，而不是像正常的设计会放到桌子这侧边；二是为了减少碰撞的疼痛感，柜子的转角设计为了 R 角。</p><h2 id="卫生间与生活阳台设计"><a href="#卫生间与生活阳台设计" class="headerlink" title="卫生间与生活阳台设计"></a>卫生间与生活阳台设计</h2><p>卫生间与生活阳台我放在一起说，当我把卫生间与生活阳台打通后，正好实现了洗漱、如厕、洗浴、洗衣 4 个区域独立，但连到了一起，虽然没有日本「4 分离式卫生间」那么合理，但勉强算是 4 分离式卫生间。卫生间与生活阳台打通后也增加了便利性，比如洗澡前拿浴巾、洗澡后晾浴巾。如果你的卫生间与生活阳台挨在一起，卫生间不使用蹲便的话，我建议你打通。</p><table><thead><tr><th>日本 4 分离式卫生间</th><th>卫生间与生活阳台打通</th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/20240527171851.png" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/20240527125044.png" alt=""></td></tr></tbody></table><p>生活阳台比较窄，只能 1 米宽，想在生活阳台设计一个洗衣台，如果用滚筒洗衣机的话，完全打开门需要 1 米以上的距离，所以只能竖着放，这样洗衣台只能放到洗衣机上面，但太高了，使用不方便。最后没有选择滚筒洗衣机而选择了波轮洗衣机，旁边买了成品的陶瓷洗衣台，媳妇儿非常喜欢这个洗衣台，现在我们洗漱洗头基本都使用的这个洗衣台。虽然现在很好用，但当时这块的水电设计一直不知道怎么做，一直阻塞工期，后面这个设计也是突然想到的。</p><p><img src="https://hexoblog.r2.depp.wang/50A49402-AF63-40EF-A7B6-FD63456FE1D4_1_105_c.jpeg" alt=""></p><p>生活阳台我选择了晾衣杆，而没有选择智能晾衣架，其实原因是因为生活阳台宽度太窄了，只有 1m，智能晾衣架放下来时需要在旁边晾衣服，宽度不够，所以就选择不了。</p><p><img src="https://hexoblog.r2.depp.wang/6A8D6C16-C553-41FB-9ACC-117CBB6DD0E5_1_105_c.jpeg" alt=""></p><p>个人觉得生活阳台还是非常重要的一个空间，晾点私人衣物，不用担心隐私问题。现在很多大户型也没有生活阳台了，有点倒行逆施了。</p><p>卫生间是按照设计师设计来装修的，淋浴区域当过道，不过门选择了外开，这样提升了过道的宽度，外开时， 也可以顺便保证生活阳台的隐私性。卫生间没有太多的储藏空间，餐边柜右边部分储藏空间分给了卫生间。</p><p><img src="https://hexoblog.r2.depp.wang/A714355E-F408-4529-A069-C5C62A6C5182_1_105_c.jpeg" alt=""></p><p>扫地机器人是设计放到卫生间洗漱柜下方的。没有做墙排，当时是我爸给我做的开槽，因为是承重墙，就没有开。</p><p><img src="https://hexoblog.r2.depp.wang/3CE6A8B4-2D82-4A98-A96C-0B9C8F0E44D7_1_105_c.jpeg" alt=""></p><h2 id="厨房设计"><a href="#厨房设计" class="headerlink" title="厨房设计"></a>厨房设计</h2><p>我这个户型大多数厨房因为没有封门，所以台面是一字型，我借生活阳台的空间将厨房其设计为 U 型，这样厨房台面变大了，储藏也基本够用了，生活阳台的空间也利用起来了，没有浪费。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/38FC4467-60F9-4502-8A1E-FA356BFB20B2_1_105_c.jpeg" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/C2A3D609-8ADE-49B3-B063-3495F180F655_1_105_c.jpeg" alt=""></td></tr></tbody></table><p>厨房设计了高低台，但因为燃气灶不能离台面太近，所以将抽屉与燃气灶错开了，抽屉没有居中。洗碗机上面的空间做了一个薄抽屉，平时放点筷子/勺子等还是挺好的。洗碗机这里插座没有设计好，跟左边燃气管处于了一个空间，为了安全，最后还是没有用，接的插线板，用的水槽下的插座。洗碗机入水管、电源线、排水管还是挺长的，不用挨得特别近，也不能设计到后面，这样会增加洗碗机的深度。</p><p><img src="https://hexoblog.r2.depp.wang/B6EAADE0-A3E2-4D25-B8D9-7272A7F1E636_1_105_c.jpeg" alt=""></p><p>U 型地柜这里也设计了很久，想如何能更好的利用这部分空间，最后还是选择的简单的结构。右边这部分可以正常使用。水槽下里面的空间，最里面放了净水器，现在还放了泡菜坛等一些东西，也算是利用起来了。原来专门给净水器设计了一个进水，最后也没有用上，净水器直接用二分转接头，和水槽龙头用的一个进水。</p><p><img src="https://hexoblog.r2.depp.wang/47DD741A-B053-4697-A781-C9198A47A96B_1_105_c.jpeg" alt=""></p><p>也模仿了一下小红书上的设计，留了个可以放手推车的柜子。</p><p><img src="https://hexoblog.r2.depp.wang/0DED9E79-E499-40D2-9A53-16381A292713_1_105_c.jpeg" alt=""></p><p>后面单独安装了一个调料柜，不少朋友都觉得还不错，开始觉得有点长，用起来后发现刚刚好。现在基本没有人用挡水条了，接缝我没有打玻璃胶，而是直接打的聚脲美缝剂，这是我的室内门师傅安利的，说不容易变黄发霉。</p><p><img src="https://hexoblog.r2.depp.wang/98DED783-6C62-4648-A90A-635519C43F99_1_105_c.jpeg" alt=""></p><p>厨房门的还有一个改动就是把门扩大了一点。原来只能一个人通过，现在基本可以两个人通过了。因为使用平开门会影响冰箱门的开关，所以用的滑轨门。</p><p><img src="https://hexoblog.r2.depp.wang/AD972C88-7DC2-496B-8038-75E81EBD7D42_1_105_c.jpeg" alt=""></p><h2 id="厅设计"><a href="#厅设计" class="headerlink" title="厅设计"></a>厅设计</h2><p>齐洪海的客厅采用的书桌加书架的方式，这种格局比较适合家里小孩大了的时候。对于我来说还不太适合，还是采用了原始的沙发 + 电视柜的格局。沙发建议越小越好，越小越显空间大，我这个沙发是 2.3m。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/51D855FF-DE34-447D-A353-F2F32E602400_1_105_c.jpeg" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/05BCD90F-E2F5-405D-9642-08AB9B773310_1_105_c.jpeg" alt=""></td></tr></tbody></table><p>我电视柜右侧没有跟墙齐平，而是在右边留了几个插座，这样空出来一点空间，也可以放点绿植。</p><p>因为噪音问题，阳台还是选择的平开窗，没有选择滑窗。如果没有噪音问题，滑窗其实也不错，有更好的通风性，更低的价格。</p><p>因为平时白天也基本不看电视，所以客厅使用的投影仪。我没给投影仪预留 HDMI 线，而是预留了一根网线，我将 Apple TV 直接与投影仪放一起，使用 HDMI 线连接，Apple TV 有线联网。</p><p>投影仪我没有用幕布，好的幕布挺贵，而晚上不用幕布效果也挺好。安装投影仪，还是需要安装一个布帘，白天想用投影仪，拉上布帘，效果也还是可以。</p><p><img src="https://hexoblog.r2.depp.wang/B4037EBB-C167-4083-9A2E-96792A9D298D_1_105_c.jpeg" alt=""></p><p>阳台的空调洞参考小红书的设计将其设计为了置物格了，想打开的时候也可以拆下来。</p><p><img src="https://hexoblog.r2.depp.wang/FD245130-00DD-4AA4-8745-AEA81C8DA0D5_1_105_c.jpeg" alt=""></p><h2 id="卧室设计"><a href="#卧室设计" class="headerlink" title="卧室设计"></a>卧室设计</h2><p>原来一直是租房，衣柜空间一直不够用。自己装修成功实现了 2 个 1.6 的大衣柜，衣服终于不用来回倒腾了。衣柜除了最上面的空间，其它都是挂衣区与抽屉。都没有做免拉手，还是用了拉手，也没有要一门到顶，现在觉得是正确的选择。</p><p><img src="https://hexoblog.r2.depp.wang/F598F4A4-62D5-49E7-AA22-7DD3F36BE84E_1_105_c.jpeg" alt=""></p><p>床头灯这里，原来设计的吊灯，后面想到吊灯会挡空调，所以又改为了壁灯。空调买的小米新风空调，带有新风功能。</p><p><img src="https://hexoblog.r2.depp.wang/51C8665A-CCDC-409C-AE1A-0C4154C01A2A_1_105_c.jpeg" alt=""></p><p>我客厅是用的风管机，两个卧室使用的挂机，有 3 个空调外机，次卧这里原来有个空调机位，我看小区里面不少人家在客厅空调机位这一个位置放了 3 个空调外机，因为放得下，所以我将次卧空调机位取消了，将 3 个空调外机也放到一起。次卧空调铜管从主卧穿过，需在木工前预埋。这让次卧窗户外移了几十厘米，让室内使用面积多了接近一个平方。空调机位空出来的地方做了个地柜。做这个地柜遇到不少麻烦，现在还是很香，平时放些不常用的东西。</p><p><img src="https://hexoblog.r2.depp.wang/9B07AB7A-D37A-4122-B7F0-F36F435564ED_1_105_c.jpeg" alt=""></p><p>我的次卧书桌没有抽屉，这样带扶手的椅子也可以放下面，坐感更舒适。整体使用不错，但高度没有考虑好，现在觉得书桌稍微有点高了。</p><p>书桌设计的 L 型，开始想做 L 型，第一家全屋定制也说他们不能做，需要自己烧钢架才行，后面找的这家全屋定制使用一根钢管就解决了这个问题。</p><p>旁边设计了一个可站立办公柜子，设计了 2 个可储物的抽屉，用于弥补旁边书桌没有抽屉的问题。</p><p><img src="https://hexoblog.r2.depp.wang/F5937B09-E832-4D37-A0F3-4E04999FCF40_1_105_c.jpeg" alt=""></p><p>因为次卧床靠墙，里面不能放床头柜，所以买了这种床头可以储物的床。</p><p><img src="https://hexoblog.r2.depp.wang/DCB817E7-31A0-4F57-B216-46596501B6B1_1_105_c.jpeg" alt=""></p><h2 id="装修的个人感受"><a href="#装修的个人感受" class="headerlink" title="装修的个人感受"></a>装修的个人感受</h2><p>以上我的所有关于装修设计的分享，再谈点我关于装修的个人感受。</p><p>如果你像我一样户型不好，那么通过设计让空间利用率更高、功能实用性更好就更有必要，如果破罐子破摔，就更加浪费了房子的价值。</p><p>装修其实是将房子升值的过程，房子可能有很多问题，但很多问题可以通过装修设计来解决。有噪音，安隔音窗；隐私性不好，安纱帘，安智能窗帘；户型不好，改户型。我们不能解决房子外面的问题，比如朝向问题、位置问题，但我们可以解决房子里面的问题。装修设计时辛苦一点，换来的是更好的居住体验。</p><p>如果还想看我分享更多关于装修方向的经验，如装修过程、家电家具选购、装修费用、装修踩坑等方面，欢迎留言。</p>]]></content:encoded>
      
      <comments>https://depp.wang/2024/decoration-design/#disqus_thread</comments>
    </item>
    
    <item>
      <title>峨眉山 - 野菜咔咔蹦蹦，云彩金顶普贤</title>
      <link>https://depp.wang/2024/emeishan/</link>
      <guid>https://depp.wang/2024/emeishan/</guid>
      <pubDate>Wed, 22 May 2024 11:24:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;对于我从小在重庆长大的我来说，上学就是下山，放学回家就是爬山，山对我来说没有什么稀奇。而峨眉山是金庸武侠小说中的峨眉派所在地，这让这座山和普通山又有了一点不一样。想去看看。&lt;/p&gt;
&lt;p&gt;五一节后工作日的峨眉山，游客明显变少了，可以通过 100 块就可以定还不错的酒店看出来。跟餐厅老板聊天，他也提到「现在是淡季中的淡季，五一酒店要五六百」。事先了解到当地有一种「竹叶菜」，尝了一下，还不错，菜单上叫「炒野菜」。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hexoblog.r2.depp.wang/5FC462C3-77B0-46BE-8DE1-9D5F704A034B_1_105_c.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>对于我从小在重庆长大的我来说，上学就是下山，放学回家就是爬山，山对我来说没有什么稀奇。而峨眉山是金庸武侠小说中的峨眉派所在地，这让这座山和普通山又有了一点不一样。想去看看。</p><p>五一节后工作日的峨眉山，游客明显变少了，可以通过 100 块就可以定还不错的酒店看出来。跟餐厅老板聊天，他也提到「现在是淡季中的淡季，五一酒店要五六百」。事先了解到当地有一种「竹叶菜」，尝了一下，还不错，菜单上叫「炒野菜」。</p><p><img src="https://hexoblog.r2.depp.wang/5FC462C3-77B0-46BE-8DE1-9D5F704A034B_1_105_c.jpeg" alt=""></p><a id="more"></a><p>罗目古镇是峨眉山下的一个没怎么开发的古镇，每月农历 3 / 6 / 9 上午有集市，当地居民会「赶场」，比较热闹。我没有去对时间，没有遇到「赶场」，但也吃到了想吃的美食，「咔咔」比较好吃，长得像肉夹馍，中间夹的「牛肉格格」。</p><p><img src="https://hexoblog.r2.depp.wang/4919DD32-860A-491B-B233-BC11F4F2F202_1_102_a.jpeg" alt=""></p><p>特色豆腐脑对我来说有点咸了，豌豆饼对我说太硬太油了。</p><table><thead><tr><th>豆腐脑</th><th>豌豆饼</th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/FD41DF2C-8A9D-4868-82F9-549479354435_1_102_a.jpeg" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/2505E7F1-EFFF-4877-A6FA-759BD4288225_1_201_a.jpeg" alt=""></td></tr></tbody></table><p>提前了解到「矿机厂烧烤」性价比很高，我没去乡镇，去的当地人推荐的一家，在成都理工大学实习基地对面，了解到他们开了几年了。性价比还可以， 2 个人 81，还没有吃完， 喝了几个峨眉雪。味道不错，但我肠胃不好，建议烧烤最后要走的时候再吃。</p><p><img src="https://hexoblog.r2.depp.wang/224D9C19-17E2-4E4E-846E-1ACD92863DEB_1_102_a.jpeg" alt=""></p><p>峨眉山市很多「蹦蹦」，一种有车厢的三轮车，从峨眉山站出来，一个开蹦蹦载客的老人招揽我坐车，价格也不贵，6 块，本来已经打了网约车，想为何不体验一下，就坐了。老人说不用导航，这块他熟，导航费流量，哈哈，现在已经不担心导航的流量了。</p><p><img src="https://hexoblog.r2.depp.wang/9CADEFBD-1FFF-4A0D-9515-C9C75AF77B0E_1_102_o.jpeg" alt=""></p><p>我使用滴滴打车的体验并不好，几次使用滴滴打车司机都要加钱，不知是我运气不好，还是滴滴就是这样。使用高德打车和打出租车就没有这个问题。</p><p>峨眉山是成都东南方向最高的山，海拔有 3000 来米。低海拔区域不需要门票，如果要登顶，需要购票。购票发现重庆 4 区县（武隆、南川、奉节、石柱）居民 2024 年门票免费，也是意外之喜。峨眉山山脚到山顶徒步距离大概有 25km 左右，如果不想从山脚爬，就需要坐观光车，从山脚坐的话要坐 1 个半小时左右，这段全是盘山公路，很容易晕车。我经常坐这这种车，返程也还是晕了。</p><p>爬山遇到 3 对搭子从山脚爬的，两个女生、两个男学生和一对情侣，都爬了 10 几个小时，很是佩服。山顶中间有处在修建筑，因为没通公路，沙子都是人工背运的，跟一个藏族老乡聊天了解到，他们的工钱是 100 斤 40 元，他一天可以背 6 趟。</p><p><img src="https://hexoblog.r2.depp.wang/627705E0-8711-4FA7-926E-B96D8AF5CA1A_1_105_c.jpeg" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/4F94C515-E6F8-4715-986E-5847826D51C4_1_105_c.jpeg" alt=""></p><p>我运气不错，出发去峨眉山前看天气预报说会下雨，爬峨眉山当天早上也下雨了。但爬山过程中没有下雨，登顶后看见了不错的景色，确实有点云上的感觉。山顶风挺大，我穿了件薄毛衣还是有点冷。峨眉山有众多寺庙，山顶有一座巨大的普贤菩萨，「金顶」是全山海拔最高的地方。</p><p><img src="https://hexoblog.r2.depp.wang/3FF4B88A-70BA-4AF9-A3E5-C991A88044C5_1_102_o.jpeg" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/E954FD64-2792-4FFB-8A95-B241694EC54F_1_105_c.jpeg" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/E80F4492-1CD2-47DC-8A55-56CFC4481A6A_1_105_c.jpeg" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/EF744D3C-099C-4EE7-A2FC-121CC13F6CFD_1_105_c.jpeg" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/0DA592E7-C17B-43CC-95B8-26D8275C636F_1_105_c.jpeg" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/4E2C53D6-CB84-4359-81BA-FC53315763DC_1_105_c.jpeg" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/C991A078-4B89-4C8F-B996-DB8854607365_1_102_o.jpeg" alt=""></p>]]></content:encoded>
      
      <comments>https://depp.wang/2024/emeishan/#disqus_thread</comments>
    </item>
    
    <item>
      <title>友情、爱情、亲情三足鼎立，上面插着燃烧的青春</title>
      <link>https://depp.wang/2024/reply-1988/</link>
      <guid>https://depp.wang/2024/reply-1988/</guid>
      <pubDate>Tue, 07 May 2024 01:28:34 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://hexoblog.r2.depp.wang/20240507092952.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;韩剧《请回答 1988》豆瓣评分很高，有 9.7 分，原来一直没有看，这次趁五一假期看了一下，确实是神剧，后劲很大。我是使用 Infuse 直接看的阿里云盘上的&lt;a href=&quot;https://www.aliyundrive.com/s/9iZaXDeakS3/folder/65119a1c22e0accfa4444c02a7994dc084212a4b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;资源&lt;/a&gt;，开始看的 1080P 内嵌字幕版本，后面有的剧集字幕不全，我就看的 4K 外挂字幕版本。Infuse 使用外挂字幕的方式：先用「打开文件」的方式添加字幕，再在「高级设定」中选择字幕。&lt;/p&gt;
&lt;p&gt;都说好的作品可以让观众灵魂共鸣，《1988》无疑做到了。这是一部很温暖的剧，包含大量真实细腻的生活细节。其内核与美剧《This is Us》相同。&lt;/p&gt;
&lt;p&gt;以下有剧透，请谨慎食用。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://hexoblog.r2.depp.wang/20240507092952.png" alt=""></p><p>韩剧《请回答 1988》豆瓣评分很高，有 9.7 分，原来一直没有看，这次趁五一假期看了一下，确实是神剧，后劲很大。我是使用 Infuse 直接看的阿里云盘上的<a href="https://www.aliyundrive.com/s/9iZaXDeakS3/folder/65119a1c22e0accfa4444c02a7994dc084212a4b" target="_blank" rel="noopener">资源</a>，开始看的 1080P 内嵌字幕版本，后面有的剧集字幕不全，我就看的 4K 外挂字幕版本。Infuse 使用外挂字幕的方式：先用「打开文件」的方式添加字幕，再在「高级设定」中选择字幕。</p><p>都说好的作品可以让观众灵魂共鸣，《1988》无疑做到了。这是一部很温暖的剧，包含大量真实细腻的生活细节。其内核与美剧《This is Us》相同。</p><p>以下有剧透，请谨慎食用。</p><a id="more"></a><p>看完这部剧，我首先是觉得编剧真厉害。剧中的台词真实到极致，完全不像是人为编排的，而更像是角色在生活中自然而然会说出的话。是得多懂生活才能写出这些台词。</p><p>选角也选得好，珍珠真的很像善宇，越看越像。演员虽然实际年龄可能与剧中人物有偏差，但他们的演技让这种偏差完全看不出来。此外，剧中的配乐也相当出色，特别是这首<a href="https://www.gequbao.com/music/8894811" target="_blank" rel="noopener">《青春》</a>- 金昌完，即使听不懂歌词，也会有一丝悲伤萦绕心头。剧中还巧妙地融入了韩国的大历史背景，如奥运会、学运。以及人生的重大事件，如丧事、高三、更年期、婚礼。</p><p>剧中人物角色还是可能看出一定的「设计性」，比如：家庭子女不同的组合方式基本覆盖了绝大多数据情况，2 个儿子、儿女年龄差较大、1 个儿子、3 个孩子（小儿子 + 2 个姐姐）；比如：单亲妈妈、单亲爸爸、爸爸是老师、双职工、家庭主妇、孩子有先天疾病、天才棋手。当然，这对故事发展有好处，也更能让更多的观众代入角色。</p><p>剧中的剪辑手法或者说讲故事的方式也十分出色，阿泽与正焕演唱会找德善、说到谁镜头切给谁、同一件事双方角度、前面的事放后面说：德善同学癫痫、阿泽从小喜欢德善等。</p><p>虽然是生活剧，但也设计了一个悬念贯穿全剧，即（中年）德善跟谁在一起了？也设计了不少反转：德善又当上奥运会入场引导员、善宇其实喜欢宝拉、阿泽也喜欢德善、阿泽与正焕演唱会找德善最后阿泽先到、阿泽最后和德善在一起。</p><p>电视剧圆满的点往往令观众开心满足，善宇妈妈与阿泽父亲的感情、正峰与美玉的感情、善宇与宝拉的感情、德善与阿泽的感情。</p><p>而遗憾的点更能唤起我们内心的情感，青春的逝去、要好的邻居也要分开、子女长大也要离家、正焕的爱情、德善奶奶的离世、正峰的感情因为对方父亲的反对而中断、宝拉因为理想而分手。这些遗憾使得整部作品的深度更上一层楼。</p><p><img src="https://hexoblog.r2.depp.wang/20240507094338.png" alt=""></p><p>剧集的开头场景，伙伴玩耍时各家妈妈叫他们回家吃饭，多么熟悉的场景，不过我小时候是奶奶叫，嗓门特别大。虽然和剧中人物隔了一代，但我小时候确实最喜欢吃的零食也是方便面 - 福满多。</p><p>最好的朋友往往是同龄人，孩子的朋友是玩伴、是同学，父母的朋友可能更多的就是经常打交道的邻居，剧中的这种邻里关系也已经超越普通友情，上升到了是一个大家庭的高度了。而正焕与阿泽的友情让很多话说不出口，正因为这样，其友情才更可贵。</p><p>母爱是即使孩子不想要名牌运动鞋，也想为孩子买，因为其它孩子有。父母总是会为儿女着想，无论是提前为儿女准备结婚的钱，还是为女儿准备结婚要用的东西。普通人的家庭关系，父母应该是做不到杨绛与钱钟书那种相敬如宾、从不吵架的。而德善家「 父母的拌嘴」与「子女的争吵」也何尝不是温暖有爱的家。当父女因为个性无法向对方表达自己情感时，宝拉第一次发工资后给爸爸买的衬衫才令人动情。</p><p>幸福家庭的基础是父母之间的爱，剧中 5 个家庭爱的形式可能不一样，但都是有爱的。在保守的年代，青春期的爱情往往萌芽于高中时期，而青春时期互相喜欢的爱情应该是最好的爱情了吧。</p><p>很多事情是现在看来没有什么，但当还是青春期的学生时，确实是天大的事。喜欢的人不喜欢自己、被小混混霸凌、恋爱对方父母的反对、父母的呵斥、老师课堂的管教。也会有一些不成熟的思想行为，想上体育课不想自习、想穿名牌运动鞋、模仿明星行为、追星。这是青春的体现，当没有这些思想行为时，你就长大了。</p><p>德善班主任对高三不想上将音乐课改为自习的学生说，孩子们，虽然现在很累，但以后你们会发现，现在是你们最好的一段时光。当最大的烦恼是不想上自习课时，何尝不是一种幸福。美玉对正峰说，做想做的事，那些愿意为它熬夜的事。如果你不愿意为一件事熬夜，那你可能不是真正喜欢。阿泽爸对善宇妈说，父母是赢不过子女的，即使赢了，那能算赢吗。家人之间不要争输赢，没有意义。</p><p>剧中父母教育还是有很多点值得思考学习的。善宇妈带珍珠，让她一直看电视，不应该吗？德善家子女打闹，但不管，让她们自己解决。德善家对子女的爱情不干涉，有男朋友自己会带回来。剧中每个孩子都很优秀，跟过得是真幸福有关，父母只需要为孩子提供好的成长环境，个人发展靠 Ta 自己。没有梦想，只有善良的德善；不懂开根公式也不懂人生的德善的父母也没有强求她一定要怎么样。</p><p><img src="https://hexoblog.r2.depp.wang/20240507094555.png" alt=""></p><p>剧中也有几个关于理财的点：虽然股票涨势很好，但没买高点股票；90 年代银行利率有 17%；最后德善家买房的位置选得好，板桥房价上升不少。</p><p>我也查了一下韩元与人民币的汇率，1988 年韩元与现在人民币的汇率大概是 100:1，因为通货膨胀，现在韩元与现在人民币的汇率大概是 200:1。也发现韩国在正式严谨的场合会使用中文，如葬礼、婚礼等。韩语原来一直都只知道「哥」（欧巴），看剧发现汉语的「妈」（哦妈）、「爸」（阿帕）、「干杯」（康培）与中文发音还挺像。</p><p>同时也了解了不少韩国特色：还有考试院这种地方；司法考试很难，要考几年；学生高考压力也大；80 年代同本同源在法律上还不能结婚；婚礼仪式完成就直接度蜜月，度蜜月算是婚礼的一部分；88 年首尔学习完凌晨回家算正常；有女子高中；西式婚礼场地挺好，很文明，还有证婚人，新郎新娘好像不用准备太多，午饭还可以在家吃。</p><p>现代人结婚晚，生育率低，这是社会发展不可避免的问题，这是高等教育与社会压力下的必然结果，宝拉也 27 岁才结婚。宝拉学运是为了国家，相比国家，更重要是自己的家人，当然那些舍身取义的人值得钦佩。</p><p>我也查了一下，原来凤凰堂弄巷的拍摄取景地是没有在首尔，而是在仁川富平十井洞壁画村，剧中的德善家从道峰区-双门洞搬家到城南市-板桥也没有太远，<a href="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/20240506114022.png" target="_blank" rel="noopener">间隔</a>大约只有 30 公里。</p><p>剧中 5 个家庭的条件算是不错了，没有房贷，没有客观的教育与医疗问题，孩子上学、自己上班也不远，但生活仍有这么多烦恼，相比之下，绝大多数人过得是真不好。剧中的德善她们年纪跟我父母差不多，都是 71 年左右，但生活差得不是半点。我 2012 年的青春也没有人家 1988 年过得好，差距不止 24 年。</p><p>《1988》很好，但每个人都太好了，好的有点不真实，这在现实生活有点难。</p><p>年纪大了，看电视不再像以前那样只关注主角，不再忽视配角，剧中的每个人都是自己人生的主角。也不再追 CP，如果爱情部分超过了剧情的1/3，那这部剧就打折扣了。</p><p>看一部好剧就要看一本好书，并没有浪费时间的感觉，就像旅行去一个地方打卡一样，是一种人生体验。</p><p>最后，此剧更适合一个人观看。</p><p><img src="https://hexoblog.r2.depp.wang/20240507093016.png" alt=""></p>]]></content:encoded>
      
      <comments>https://depp.wang/2024/reply-1988/#disqus_thread</comments>
    </item>
    
    <item>
      <title>什么是 NAS？如何低成本玩 NAS？</title>
      <link>https://depp.wang/2024/what-is-nas/</link>
      <guid>https://depp.wang/2024/what-is-nas/</guid>
      <pubDate>Tue, 23 Apr 2024 14:32:08 GMT</pubDate>
      <description>
      
        &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/l8lkkB-rlxQ?si=HHFhjwIgOCen4KO_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;以下是文字版：&lt;/p&gt;
&lt;h2 id=&quot;什么是-NAS&quot;&gt;&lt;a href=&quot;#什么是-NAS&quot; class=&quot;headerlink&quot; title=&quot;什么是 NAS&quot;&gt;&lt;/a&gt;什么是 NAS&lt;/h2&gt;&lt;p&gt;NAS，Network Attached Storage，翻译为中文是「网络附加存储」。我们常用的硬盘也叫 DAS（Direct Attached Storage ），就是「直接附加存储」。硬盘是通过数据线直接连接，只能当前设备使用。而 NAS 可以看成是将硬盘联网，是局域网中所有设备的共享硬盘。如果你将 NAS 的外网访问打通，那 NAS 就是数据存放在你自己硬盘的私人云盘。换句话说，如果一个硬盘，它可以通过网络连接使用，那它就可以当成一个 NAS。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/l8lkkB-rlxQ?si=HHFhjwIgOCen4KO_" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>以下是文字版：</p><h2 id="什么是-NAS"><a href="#什么是-NAS" class="headerlink" title="什么是 NAS"></a>什么是 NAS</h2><p>NAS，Network Attached Storage，翻译为中文是「网络附加存储」。我们常用的硬盘也叫 DAS（Direct Attached Storage ），就是「直接附加存储」。硬盘是通过数据线直接连接，只能当前设备使用。而 NAS 可以看成是将硬盘联网，是局域网中所有设备的共享硬盘。如果你将 NAS 的外网访问打通，那 NAS 就是数据存放在你自己硬盘的私人云盘。换句话说，如果一个硬盘，它可以通过网络连接使用，那它就可以当成一个 NAS。</p><a id="more"></a> <p><img src="https://hexoblog.r2.depp.wang/20240422111448.png" alt=""></p><h2 id="NAS-与云盘配合使用"><a href="#NAS-与云盘配合使用" class="headerlink" title="NAS 与云盘配合使用"></a>NAS 与云盘配合使用</h2><p>我的 NAS 在我的家里，位于我的家庭局域网中</p><p>我是这么使用 NAS：</p><ol><li>当普通硬盘用，用做电脑系统备份和扩展电脑存储空间</li><li>当家庭局域网共享硬盘用，如在 AppleTV 上利用 Infuse 观看 NAS 中存放的影视</li><li>当私人云盘用，存放不想放在云盘的个人文件</li></ol><p>我同时也使用云盘，我用苹果全家桶，我用 iCloud 云盘做手机系统备份与相册存储，NAS 替代不了这部分功能。我部分文件也放到 iCloud 云盘上，iCloud 云盘可以对普通文件夹自动同步，不像有的云盘需要单独上传与下载。我也用阿里云盘，平时用 Infuse 直接看阿里云盘中的影视，不用专门下载到 NAS，比较方便。阿里云盘免费用户虽然说下载限速了，但是在线观看还是可以用。优质的影视我会再下载到 NAS 中保存。</p><p>NAS 本质上是硬盘，你是否需要 NAS，就看你是否需要硬盘。</p><h2 id="配置家里所有设备在一个局域网中"><a href="#配置家里所有设备在一个局域网中" class="headerlink" title="配置家里所有设备在一个局域网中"></a>配置家里所有设备在一个局域网中</h2><p>玩 NAS，首先我们需要配置家里所有设备 在一个局域网中，在家庭网络中，可以利用路由器 Mesh 功能，让家里所有设备都在路由器这个局域网中。Mesh 相较于 AC + AP，它的成本更低，现在也是家庭局域网的主流方案。</p><p><img src="https://hexoblog.r2.depp.wang/20240422141524.png" alt=""></p><p>这是我家的网络图。我是使用 2 台支持 MESH 的小米 WIFI 6 路由器，和一个网线分线器来实现的，分线器也叫交换机。</p><table><thead><tr><th>路由器</th><th>分线器</th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/20240423171649.png" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/20240423171659.png" style="zoom:67%;"></td></tr></tbody></table><p>路由器型号是 <a href="https://u.jd.com/Zz1YQGx" target="_blank" rel="noopener">AX3000T</a>，性价比还是很高，我买的 190，现在降价了，169 。网线分线器是 <a href="https://u.jd.com/ZbgpIRt" target="_blank" rel="noopener">绿联的 5 口分线器</a>，不过你可能也用不上，这要看你的网线情况。如果你还没有装修，建议在装修时，可以直接在两个路由器的之间预留一根网线。</p><h2 id="如何低成本玩-NAS"><a href="#如何低成本玩-NAS" class="headerlink" title="如何低成本玩 NAS"></a>如何低成本玩 NAS</h2><p>如何低成本玩 NAS？如果你有一个可以 24 小时开机的、可以兼当 NAS 主机的设备：</p><ul><li>如可以连接外接硬盘的路由器或软路由</li><li>如闲置的笔记本电脑</li><li>如 24 小时开机的台式电脑或 Mac mini 等</li></ul><p>你就可以不用专门购买成品 NAS 主机，如极空间或群晖的 NAS 主机。你就可以省下这部分成本，实现低成本玩 NAS。NAS 的成本就是你的购买存储设备的成本，如硬盘。</p><p>我也买过极空间的 Q2C NAS 主机，但发现其并不适合我，如果想了解具体原因，可以看我<a href="https://depp.wang/2023/11/28/mac-mini-doubles-as-a-nas/">这篇文章</a>。</p><p>硬盘有几种，移动硬盘，固态硬盘，机械硬盘。如果你原来有硬盘，那你可以直接用。</p><p>如果是新购买，一般来说，做 NAS 就是想要大容量，所以一般是买机械硬盘，机械硬盘一般买 4T 及以上，性价比最高，4T 以下更建议买固态硬盘。我是买的 3.5 寸的 <a href="https://u.jd.com/ZQDvUx2" target="_blank" rel="noopener">西数红盘 Plus</a> 4T 版本，我买的 720 左右。</p><img src="https://hexoblog.r2.depp.wang/20240423171950.png" style="zoom:30%;">如果我们只用一块硬盘，如果硬盘损坏，就存在数据丢失的风险，要保证数据安全，我们可以用多块硬盘对数据进行备份。组织多块硬盘一起工作叫磁盘阵列（RAID），磁盘阵列有很多模式，如：RAID 0，RAID 1 等，我是用的 RAID 1 ，我买了两块  [西数红盘 Plus](https://u.jd.com/ZQDvUx2) 4T 硬盘做 RAID 1，其中一块做另一块的镜像，完整备份所有内容，虽然会损失一半的储存空间，但这是花费最少，且很安全的方案。对我来说 4T 也够用了。<p>如果你原来就有硬盘，你可以根据自己的数据安全需求，判断要不要再可以再买一块硬盘做磁盘阵列。</p><p>机械硬盘不像移动硬盘，它没有连接接口，需要套一个移动硬盘盒，才能连接到其它设备使用，如果你只买一个机械硬盘，那你可以买一个像这种移动硬盘盒配。</p><img src="https://hexoblog.r2.depp.wang/20240423172010.png" style="zoom:30%;"><p>如果多个硬盘就是用来做 NAS，不会当移动硬盘用，或者需要「硬 RAID」功能，那可以买这种磁盘阵列柜，我用 2 个机械硬盘，所以我买的 <a href="https://u.jd.com/ZQDNOeP" target="_blank" rel="noopener">绿联双盘位硬盘柜</a>，我买的 320 左右。</p><img src="https://hexoblog.r2.depp.wang/20240423172020.png" style="zoom:30%;"><p>这里要注意，磁盘阵列柜「带不带 RAID」要看你连接阵列柜的设备支不支持「软 RAID」，软 RAID 是通过软件实现的 RAID，如果支持，比如我用 Mac mini 连接磁盘阵列柜，Mac mini 支持软 RAID，所以我买的磁盘阵列柜就选不带 RAID 功能。磁盘阵列柜的 RAID 是「硬 RAID」，是物理机器本身支持 RAID。</p><p>所以我的成本就是：2 块 4 T 硬盘加一个磁盘阵列柜，差不多 1850，算用 5 年，每年 370 的成本。如果我额外买 NAS 主机，即使选最便宜的极空间的 Q2C，也要 899，而这个价格可以再买一块 4T 硬盘了。</p><p>我分享的低成本玩 NAS 核心点就是：你不用专门买 NAS 主机，你只要有硬盘你就可以玩 NAS。</p>]]></content:encoded>
      
      <comments>https://depp.wang/2024/what-is-nas/#disqus_thread</comments>
    </item>
    
    <item>
      <title>读《埃隆·马斯克传》</title>
      <link>https://depp.wang/2024/elon-musk/</link>
      <guid>https://depp.wang/2024/elon-musk/</guid>
      <pubDate>Thu, 11 Apr 2024 13:49:34 GMT</pubDate>
      <description>
      
        &lt;p&gt;本文涉及剧透！&lt;/p&gt;
&lt;p&gt;《埃隆·马斯克传》一直没有上微信读书（以上。因为我一直没有更新微信读书 APP，所以搜不到），我就淘宝低价买了正版纸质书，16 元。书挺厚，有约 60 万字，断断续续读了 20 天才读完，记录下阅读感受。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>本文涉及剧透！</p><p>《埃隆·马斯克传》一直没有上微信读书（以上。因为我一直没有更新微信读书 APP，所以搜不到），我就淘宝低价买了正版纸质书，16 元。书挺厚，有约 60 万字，断断续续读了 20 天才读完，记录下阅读感受。</p><a id="more"></a><h2 id="了解真实的-Musk"><a href="#了解真实的-Musk" class="headerlink" title="了解真实的 Musk"></a>了解真实的 Musk</h2><ol><li>71 年出生，小时候生活在南非，童年一直遭受霸凌</li><li>有个弟弟和妹妹，父亲算是中产，父亲很坏，父母 8 岁离婚</li><li>不是美国人，后获得美国国籍</li><li>喜欢看书，喜欢看科幻小说，影响最大的是《银河系搭客车指南》</li><li>做为程序员写了 Zip2，一个线上黄页 + 地图的软件，卖后分了 2200 万美金，此时 27 岁</li><li>PayPal 不是 Musk 创建的，他创建是 X.com，与 PayPal 合并后，仍使用 PayPal 品牌</li><li>因为跟 PayPal 创始人理念不同，被赶出公司，PayPal 被 eBay 收购后，股票兑换 2.5 亿美金</li><li>Musk 想将 X.com 打造成一个一站式互联网银行，但 PayPal 只想做支付这个细分市场</li><li>度假得疟疾差点死了</li><li>先创建的 SpaceX，再有的 Tesla</li><li>创建 SpaceX 原因：想让人类成为跨行星物种、火箭「白痴指数」很高</li><li>投资 Tasla 的原因：因为感受了电动车加速动力、电动车使用可再生能源</li><li>2007 年处于崩溃边缘，Tesla 接近破产，SpaceX 前 3 次发射失败</li><li>SpaceX 因为 PayPal 创始人的注资才起死回生</li><li>Tesla 因为奔驰母公司戴姆勒的注资才起死回生</li><li>「Tesla 上海」是中国首家独资的外国车厂</li><li>目前有 10 个孩子，都是试管</li><li>第一个孩子出生不久就去世了，有一个孩子变性了</li><li>第一任妻子生了 5 个孩子：双胞胎 + 三胞胎：和女友生了 3 个：X / Y / 塔乌；和员工生了个龙凤胎</li><li>Musk 参与创建了 OpenAI </li><li>因为看见交通是 2 维的，想打造 3 维交通，所以创建了 Boring Company</li><li>因为打字太慢，受科幻小说《文明》启发，创办了 Neuralink</li><li>为了 SpaceX 的资金问题，Musk 想出了商业化的星链</li><li>2017 年夏到 2018 秋是 Musk 最难熬的一段时间，正经历躁郁症，而 Tesla 需要每周生产 5000 车才能活下去，用 6 个月时间，将产能提升了一倍</li><li>星链在乌克兰战争中发挥了很大的作用，战争开始时 Musk 禁止星链用于进攻</li><li>收购 Twitter 的原因：钱太多了，不想放银行，喜欢用 Twitter，想保障言论自由，反觉醒文化，想用 Twitter 实现 X.com 没有实现的金融愿望</li><li>Twiter 被 Musk 收购后，实际并没有按 Musk 理想（保障言论自由）运营，也按了 Musk 喜好封禁与恢复账号</li><li>跟相扑运动员摔跤，为了将相扑运动员摔倒导致颈部受伤，做过多次手术，留下后遗症</li><li>有双相障碍，也叫躁郁症，会做一些冲动的事，也会沉浸在坏事中无法自拔</li><li>参加 Joe Rogan 播客是一次公关，是为了缓解大众对 Musk 的负面看法，结果他抽了下大麻，把事情搞得更不好了</li><li>有双重人格，有黑暗人格</li><li>有阿斯伯格综合征：对人冷漠，苛刻，没有同理心</li><li>Musk 一天特别忙，经常凌晨还在处理事情</li><li>喜欢玩游戏，喜欢玩策略游戏，喜欢玩《低模之战》（The Battle Of Polytopia）</li><li>通过玩玩具，发现车底是一块，改造了 Tesla 生产</li><li>因为变性儿子仇恨富人，所以卖掉了所有房子，经常住朋友家</li><li>Musk 的公司都是「狼性文化」， Tesla 工厂生产都是 24 小时不停</li><li>Musk 的儿子凯想不读高中，想直接去 Twitter 当程序员，Musk 没有意见，表示学校主要是提供社交场所</li><li>Musk 说儿子 X 会在火星生活</li><li>生活饮食不太健康</li></ol><h2 id="Musk-的-6-个公司"><a href="#Musk-的-6-个公司" class="headerlink" title="Musk 的 6 个公司"></a>Musk 的 6 个公司</h2><ol><li>SpaceX：<ul><li>最终目标：人类移民火星</li><li>主要业务：<ol><li>可重复利用火箭：猎鹰 9 号、星舰等</li><li>星链</li></ol></li><li>逐步目标：<ol><li>可重复利用火箭</li><li>太空旅行</li><li>人类移民火星</li></ol></li></ul></li><li>Tesla：<ul><li>目标：电动车 + 清洁能源 + 人工智能公司</li><li>业务：<ol><li>电动车：S3XY + Cybertruck</li><li>清洁能源：太阳能 Solar + 家庭储能 Powerwall</li><li>完全自动驾驶：目前还没有实现，现在使用神经网络驱动，已经表现挺好了</li><li>无人驾驶车型：Robotaxi</li><li>2.5 万美元车型：使用「下一代平台」打造</li><li>人形机器人：Optimus</li><li>超级计算机：Dojo</li></ol></li></ul></li><li>Neuralink<ul><li>初衷：让人类与计算机心智融合</li><li>目标：<ol><li>让瘫痪的人用意念控制计算机（已实现）</li><li>让失明的人看见光明</li><li>让瘫痪的人可控制四肢</li></ol></li></ul></li><li>X.com (Twitter)<ul><li>目标：社交 + 金融公司</li><li>举措：<ol><li>让内容生产者赚钱</li><li>使用信用卡确认真人，降低僵尸用户</li></ol></li></ul></li><li>X.ai<ul><li>使命：中立的，为人类服务的，不会对人类有害的人工智能</li><li>逐步目标：<ol><li>打造一个辅助编程机器人</li><li>打造一个媲美 ChatGPT 的聊天机器人</li><li>实现通用人工智能</li></ol></li><li>AI 需要大量的训练数据，Musk 的优势在于有电动车拍摄的大量视频数据，Twitter 有大量文字数据</li></ul></li><li>Boring Comapany<ul><li>目标：城市间快速交通</li></ul></li></ol><h2 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h2><ul><li>Twitter 是个游乐场：「推特会奖励那些冲动的、无礼的、未经筛选的玩家，就像给打字的拇指装上了火焰喷射器一样。推特和学校操场（游乐场）有很多相似之处，人们可以在这里嘲弄、欺负他人。但在推特当中，聪明的孩子会赢得粉丝的关注，而不是被人推下水泥台阶。如果你是最富有且最聪明的人，那么与小孩子在操场上不同的是，你还可以成为整个推特操场上的国王。」</li><li>AGI（通用人工智能）同时需要 2 种能力：自然语言回答问题能力 + 物理世界导航能力</li></ul><h2 id="衍生了解"><a href="#衍生了解" class="headerlink" title="衍生了解"></a>衍生了解</h2><ul><li>第一性原理：用物理学的角度看待世界的方法，也就是说一层层剥开事物的表象，看到里面的本质（原理），然后再从本质一层层往上走</li><li>白痴指数：一个零部件的成本与它的原材料成本的比值</li><li>五步工作法：<ol><li>质疑每项要求</li><li>删除要求当中所有你能删除的部分和流程，虽然你可能还地把它们加回来</li><li>再简化和优化</li><li>加速周转时间</li><li>自动化</li></ol></li><li>SpaceX 的火箭：<ol><li>猎鹰 9 号：一级推动器，二级推动器，运载设备（如龙飞船航天器）。一级推动器与龙飞船可回收</li><li>星舰：一级推动器（叫超重型火箭），运载设备（叫星舰航天器）。一级推动器与星舰航天器都可回收</li></ol></li><li>《低模之战》人生小课堂<ol><li>同理心不是公司资产</li><li>不要惧怕失败</li><li>要主动出击</li><li>优化每个回合的策略</li><li>双倍下注</li><li>为战斗分配好资源</li><li>玩游戏适可而止</li></ol></li></ul><h2 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h2><ol><li>有钱人生孩子跟玩似的，方式与思想好像差了几个时代</li><li>Musk 的孩子很聪明，Musk 基因还是强大</li><li>有钱人有大量试错的机会，普通人基本没有犯错的机会</li><li>Musk 玩德州，每次都下原来的双倍，直到赢回来。在 hold 得住的前提下，这么玩就不是赌博，而是最好的技术</li><li>如果你领工资，不承担风险，就不能算联合创始人（汤姆-穆勒，SpaceX 的第一个重要雇员）</li><li>在美国，你可以只遵守物理学规则，但也要有真本身才行</li><li>对 Twitter 有了解完全是因为 Musk 与 Trump。社交网站的名人效应</li><li>疫情 Tesla 股票最低 25 美元，那时候能抄点底的话</li><li>Musk 在担心邪恶的 AI ，我们在担心生计，这就是差距</li><li>造车难的是造一个好工厂可以快速生产出好车，做作品难的是持续生产好的作品</li><li>你必须对自己技术自信，你才能跟 Musk 沟通 - 我们都需要一项技能经得起挑战</li><li>如果你认为是对的，也要对抗 Musk - 做正确的事</li><li>精神的力量，我们也需要个宏伟的目标（愿景思维）在头脑中要驱动自己吗</li><li>做喜欢的事，忙起来，应该也会取得一点成绩</li><li>多看看书，可以换换脑子</li><li>Twitter 与 AI 用起来</li></ol>]]></content:encoded>
      
      <comments>https://depp.wang/2024/elon-musk/#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何给家庭网络免费开启 IPv6 与设置软路由</title>
      <link>https://depp.wang/2024/open-ipv6-and-soft-router/</link>
      <guid>https://depp.wang/2024/open-ipv6-and-soft-router/</guid>
      <pubDate>Tue, 09 Apr 2024 06:25:22 GMT</pubDate>
      <description>
      
        &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/V9BDmN4k8v0?si=oIJjJ4s1oSgGOfAz&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;以下是文字版：&lt;/p&gt;
&lt;h2 id=&quot;开启-IPv6&quot;&gt;&lt;a href=&quot;#开启-IPv6&quot; class=&quot;headerlink&quot; title=&quot;开启 IPv6&quot;&gt;&lt;/a&gt;开启 IPv6&lt;/h2&gt;&lt;h3 id=&quot;开启-IPv6-的好处&quot;&gt;&lt;a href=&quot;#开启-IPv6-的好处&quot; class=&quot;headerlink&quot; title=&quot;开启 IPv6 的好处&quot;&gt;&lt;/a&gt;开启 IPv6 的好处&lt;/h3&gt;&lt;p&gt;开启 IPv6 的好处就是可以把公网与家庭网络打通，并且是免费的。这可以做到很多事，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我&lt;a href=&quot;https://www.youtube.com/watch?v=QTLd2SQVk7s&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上个视频&lt;/a&gt;分享的，你可以把家里面的电脑变为服务器&lt;/li&gt;
&lt;li&gt;可以利用 Tailscale 低延迟远程控制家里电脑&lt;/li&gt;
&lt;li&gt;让你可以公网访问你家里的 NAS&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      <content:encoded><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/V9BDmN4k8v0?si=oIJjJ4s1oSgGOfAz" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>以下是文字版：</p><h2 id="开启-IPv6"><a href="#开启-IPv6" class="headerlink" title="开启 IPv6"></a>开启 IPv6</h2><h3 id="开启-IPv6-的好处"><a href="#开启-IPv6-的好处" class="headerlink" title="开启 IPv6 的好处"></a>开启 IPv6 的好处</h3><p>开启 IPv6 的好处就是可以把公网与家庭网络打通，并且是免费的。这可以做到很多事，比如：</p><ol><li>我<a href="https://www.youtube.com/watch?v=QTLd2SQVk7s" target="_blank" rel="noopener">上个视频</a>分享的，你可以把家里面的电脑变为服务器</li><li>可以利用 Tailscale 低延迟远程控制家里电脑</li><li>让你可以公网访问你家里的 NAS</li></ol><a id="more"></a><p>当然，使用 IPv4 公网 IP 也可以，只是现在 IPv4 公网 IP 基本是需要收费的，还不便宜，我这边 IPv4 公网 IP 一个月要100 块，或者要我套餐费用很高才可以给我分配。</p><h3 id="如何开启-IPv6"><a href="#如何开启-IPv6" class="headerlink" title="如何开启 IPv6"></a>如何开启 IPv6</h3><p>现在基本宽带都默认支持 IPv6，只要你的路由器支持，你就可以开启 IPv6。要看路由器是否支持，你可以咨询你的购买商家，也可以登陆你的路由器后台，看是否有支持开启 IPv6 的选项，如果有，代表你路由器支持。</p><p>我是电信宽带、路由器是 <a href="https://u.jd.com/Zz1YQGx" target="_blank" rel="noopener">小米 AX3000T</a> ，我发现我即使不使用路由器拨号，路由器即使是 DHCP 模式，只在路由器上开启 IPv6，家里的网络设备也可以获取 IPv6 公网 IP。</p><p><img src="https://hexoblog.r2.depp.wang/20240409140050.png" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/20240409140215.png" alt=""></p><p>我们可以看出，只要路由器支持，要开启 IPv6，不一定非得将光猫改为桥接模式，使用光猫拨号也可以开启 IPv6 。想把将光猫改为桥接模式，宽带师傅直接远程就可以修改。你也可以找宽带师傅要你光猫的 admin 用户的密码，这样你就可以自己在光猫后台改。</p><p><img src="https://hexoblog.r2.depp.wang/20240407144437.png" alt=""></p><p>光猫拨号与桥接的主要区别就是宽带账号登录的地方不同。在光猫，就是光猫拨号，路由器插上就能用，一般宽带安装默认就是这种模式。在路由器，就是光猫桥接，就是使用路由器拨号。</p><p>使用 <code>ping6 -c 1 240C::6666</code>，就可以判断你是否成功开启了 IPv6。</p><p><img src="https://hexoblog.r2.depp.wang/20240409140320.png" alt=""></p><p>如果返回结果是 240 开头，就代表已经成功开启 IPv6 。</p><p>一旦开启了 IPv6，防火墙很重要，不然就像你的大门不上锁，广迎八方来客。</p><p>我测试发现，当我使用光猫拨号时，即使在后台页面已经关闭光猫和路由器的防火墙了，也无法通过 IPv6 公网 IP 访问局域网设备，其防火墙好像关不掉，可能是运营商光猫默认无法关闭防火墙。</p><p>如果你使用路由器拨号，你一定要开始路由器防火墙，比如我这个路由器在这里开启：</p><p><img src="https://hexoblog.r2.depp.wang/20240409160822.png" alt=""></p><h3 id="只有-IPv6-也可以做那些事"><a href="#只有-IPv6-也可以做那些事" class="headerlink" title="只有 IPv6 也可以做那些事"></a>只有 IPv6 也可以做那些事</h3><p>当有了 IPv6 公网 IP，在防火墙开启时，还是可以做不少事。比如两个设备都有 IPv6，都安装了 Tailscale 并启动，就可以利用 Tailscale 为两个设备建立点对点直连，让两个设备处于一个异地虚拟局域网。IPv6 的点对点直接，延迟很低，只有几十毫秒。这样就可以实现一些功能。比如：远程控制，其中一个设备开启屏幕共享，另一个设备可以远程控制这个设备。还比如：文件共享，你的 NAS 开启「文件共享」，另一个设备就可以查看 NAS 上的文件或视频等。注意，只要有 IPv6，即使防火墙开启也可以做到。</p><p>我使用 Tailscale 而没有使用 ZeroTier 的原因，是因为 Tailscale 给我的体验更好。</p><h2 id="设置软路由"><a href="#设置软路由" class="headerlink" title="设置软路由"></a>设置软路由</h2><p>我们有了 IPv6，但实现有的功能光有 IPv6 还不行。比如我<a href="https://www.youtube.com/watch?v=QTLd2SQVk7s" target="_blank" rel="noopener">上个视频</a>分享这种玩法，我需要使用软路由来配置防火墙规则。</p><h3 id="你是否需要软路由"><a href="#你是否需要软路由" class="headerlink" title="你是否需要软路由"></a>你是否需要软路由</h3><p>你是否需要软路由，换个说法就是软路由有哪些作用，你可以根据软路由作用来判断你是否需要一个软路由。软路由可以做不少事，比如：配置指定防火墙规则，给家庭局域网设置网络代理，兼作 NAS 系统，或者当小型服务器使用，跑点 Docker 什么的。如果你有这方面的需求，可以考虑使用软路由。</p><p>现在有的硬路由，如爱快硬路由，也可以折腾不少东西。像华硕有的路由器也可以设置防火墙。你要根据自己的情况来判断是否需要一个软路由。</p><p>我使用的软路由是电犀牛的 R68s，使用几个月了，还是比较稳定，个人还是比较推荐的。我买的是 419 块，但目前我看淘宝官方店，已经没有卖这款了，还在卖它的一个低配版 <a href="https://m.tb.cn/h.5AvZc2W" target="_blank" rel="noopener">R66s</a>，目前价格 299。它们 CPU 是一样的，R66s 是 2 G 内存，只有 2 个万兆网口，没有磁盘储存，目前我这个 4G 内存基本没有超过 10% 的时候，网口我也只用了 2 个，磁盘也没有用，如果你是轻量使用，买这款也行。</p><h3 id="如何设置软路由"><a href="#如何设置软路由" class="headerlink" title="如何设置软路由"></a>如何设置软路由</h3><p><img src="https://hexoblog.r2.depp.wang/20240409114734.png" alt=""></p><p>设置使用软路由很简单，将光猫设置为桥接模式，软路由 WAN 口连接光猫，使用软路由拨号，路由器连接到软路由 LAN 口，电犀牛软路由使用 iStoreOS 系统，它的防火墙默认开启，正常不用修改，使用默认规则就行。注意此时要关闭路由器防火墙。</p><p>电犀牛软路由网段默认是 192.168.100.0/24，我的小米路由器是软路由的子网，网段仍然是192.168.31.0/24 。如果你有智能家居设备，使用软路由也不会影响，这时候软路由相当于光猫，路由器还是原来一样使用，智能家居设备还是在一个子网中。PS：此时光猫是桥接模式，所以无法通过 192.168.1.1 登陆其后台。</p><p><img src="https://hexoblog.r2.depp.wang/20240408160730.png" alt=""></p><p>这是我家的网络图，我有线设备仍连接到路由器上，没有连接到软路由上，因为我想把软路由和路由器放一起，放在电视柜。不想把软路由放弱电箱，弱电箱在鞋柜里面，不太不方便打开，因为电视柜只有两根网线，所以其他设备也不方便连接到软路由上，但也对使用没有什么影响，家里设备也是在路由器的这个局域网中，其他局域网设备也方便访问我局域网中的 NAS。</p><h3 id="软路由系统-iStoreOS-的功能介绍"><a href="#软路由系统-iStoreOS-的功能介绍" class="headerlink" title="软路由系统 iStoreOS 的功能介绍"></a>软路由系统 iStoreOS 的功能介绍</h3><p><img src="https://hexoblog.r2.depp.wang/20240409141306.png" alt=""></p><ol><li>首页：可以看到整体概览信息</li><li>网络向导：可以设置宽带拨号连接等</li><li>状态：可以看见各种状态</li><li>系统：有很多功能，可以升级、重启等</li><li>iStore 是插件市场，可以安装三方插件，这里要注意三方插件安全性</li><li>Docker：可以设置运行 Docker 容器</li><li>服务：主要就是安装的三方服务</li><li>网络存储：可以折腾 NAS 系统等</li><li>网络：可以配置网络规则</li></ol><p>我觉得最重要的是要理解「网络-&gt;防火墙」的这块的规则：</p><p><img src="https://hexoblog.r2.depp.wang/20240409141535.png" alt=""></p><p>很重要一个理解的点是，这里的「入站、出站、转发、动态伪装」针对的的是前面的「区域」，第一行「入站、出站、转发、IP 动态伪装」指的是 LAN 区域，同样，第二行「入站、出站、转发、IP 动态伪装」指的是 WAN 区域。</p><p><img src="https://hexoblog.r2.depp.wang/20240409141917.png" alt=""></p><p>后面的转发指的是「区域内」的转发，前面的转发代表「区域间」的转发：</p><p><img src="https://hexoblog.r2.depp.wang/20240409142117.png" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/20240409142407.png" alt="图片来自 韩非Talk"></p><p>这里的规则理解可以看一下 UP 主「韩非Talk」的<a href="https://www.bilibili.com/video/BV1mt4y1T7qB/" target="_blank" rel="noopener">这个视频</a>，讲得比较浅显易懂。</p><h3 id="我使用软路由遇到的问题"><a href="#我使用软路由遇到的问题" class="headerlink" title="我使用软路由遇到的问题"></a>我使用软路由遇到的问题</h3><p>最后说一下我使用软路由的遇到的一个问题，我发现宽带在没有欠费的情况下，家里过一段时间就没有网，发现重启一下软路由就可以解决这个问题。从宽带师傅了解到宽带运营商会定期重启网络，可能网络重启后，软路由没有读取到最新网络信号就没有连上网。软路由我原来没有设置定时重启，我目前设置了软路由每天定时重启，我再观察一段时间，看是否还会有这个问题。</p>]]></content:encoded>
      
      <comments>https://depp.wang/2024/open-ipv6-and-soft-router/#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何利用 IPv6 免费把家里电脑变成服务器</title>
      <link>https://depp.wang/2024/03/23/ipv6-mac-server/</link>
      <guid>https://depp.wang/2024/03/23/ipv6-mac-server/</guid>
      <pubDate>Sat, 23 Mar 2024 14:41:09 GMT</pubDate>
      <description>
      
        &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/QTLd2SQVk7s?si=SkxGacF29zautFhN&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;以下为文字版：&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;今天给大家分享的是如何利用 IPv6 免费把家里面的电脑变为服务器。我们家里电脑与服务器最大的区别就是服务器有一个公网 IP，可以公网访问其服务，当我们给家里面电脑用上 IPv6 公网 IP 时，使家里面电脑运行的服务，可以被公网访问，那它就可以当服务器用。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/QTLd2SQVk7s?si=SkxGacF29zautFhN" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>以下为文字版：</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天给大家分享的是如何利用 IPv6 免费把家里面的电脑变为服务器。我们家里电脑与服务器最大的区别就是服务器有一个公网 IP，可以公网访问其服务，当我们给家里面电脑用上 IPv6 公网 IP 时，使家里面电脑运行的服务，可以被公网访问，那它就可以当服务器用。</p><a id="more"></a><p>先说一下，家里面电脑做服务器不太适合的场景：</p><ol><li>搭建网站，因为现在像 GithHub Pages、Cloudflare Pages 和 Vercel，它们都提供托管网站的功能，并且免费稳定，是完全没有必要用家里面的电脑做服务器来搭建网站的。我的网站 <a href="https://depp.wang">https://depp.wang</a> 就是托管的 GitHub 的 Pages 上的</li><li>如果你是想远程控制家里面的电脑，也没有必要通过这种方式，我更建议你用 Tailscale 实现，再使用屏幕共享的方式去控制，使用这种方式的话，你可以完全关闭你的防火墙，会更安全。当然，如果你家里有 IPv6 公网 IP 就更好了，你可以直接让 Tailscale 建立这种点对点直连，延迟更低，体验更好。</li></ol><p>那哪些场景可以用呢？我举 2 个例子：</p><ol><li>比如你经常有远程控制家里面的电脑的需求，但又不方便使用 Tailscale 的时候</li><li>比如你需要一台云服务器接口联调，比如说我跟微信公众平台做接口联调。这种情况用自己的电脑性能会更好，也会更方便</li></ol><p>这些场景就比较适合把家里面的电脑当服务器来用，其它的场景你可以探索一下，可玩度还是挺高的。</p><h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><p>如果你想把家里面的电脑当服务器来用的话，还是有一点前置要求的。</p><h3 id="1、IPv6-公网-IP"><a href="#1、IPv6-公网-IP" class="headerlink" title="1、IPv6 公网 IP"></a>1、IPv6 公网 IP</h3><p>首先，需要你有一个公网 IP，现在 IPv4 公网 IP 都需要收费，但如果你的宽带是电信的话，你可以免费获得 IPv6 公网 IP，电信宽带都有 IPv6 公网 IP，只是默认关闭了，只要你的路由器支持 IPv6，只要在路由器上面设置开启一下就行。移动和联通宽带我因为没有用过，不确定，你可以问下客服，应该是已经支持了的。</p><h3 id="2、防火墙可配置"><a href="#2、防火墙可配置" class="headerlink" title="2、防火墙可配置"></a>2、防火墙可配置</h3><p>其次，因为你需要对外提供服务，所以你就需要防火墙配置指定 IP 可被公网访问，而光猫防火墙默认是关闭了的，我们是配置不了光猫的防火墙的，所以我们只让光猫做光信号转电信号，而不使用其拨号，这样它就没有防火墙。像有的路由器，它是支持防火墙配置的，比如华硕的一些路由器，但大多数路由器都不支持，所以如果你的路由器不支持的话，要想配置防火墙，你要么就换个路由器，要么就买个软路由，要么给你让路由器刷个 OpenWRT 系统，但给路由器刷这个 OpenWRT 系统，也是需要路由器满足一定要求的。我用的<a href="https://u.jd.com/Zz1YQGx" target="_blank" rel="noopener">小米路由器</a>，我没有刷这个 OpenWRT 系统，我买了个软路由，软路由是电犀牛的 R68s，我用了几个月了，使用下来还是比较稳定，我个人还是比较推荐的。</p><p>因为主题原因，这里我就展开如何开启 IPv6 和折腾软路由了，可以先网上搜索一下。后面我会专门出一期教程来专门讲这个。</p><p>所以前置要求也可以说是需要你宽带支持 IPv6，你路由器支持 IPv6，你路由器防火墙可配置（或者你有一个软路由）。</p><p>PS：关于光猫防火墙的说明。我使用 admin 用户的账号密码登录我的光猫后台（admin 密码找宽带师傅要），发现我光猫的防火墙无法关闭，防火墙也无法配置，你可以登录你的光猫后台看一下是否可以配置防火墙。即使可以配置防火墙，也还面临着公网 IP 变化需手动修改配置的问题，而使用光猫确实是没有使用软路由方便的。</p><h3 id="3、域名-Cloudflare（可选）"><a href="#3、域名-Cloudflare（可选）" class="headerlink" title="3、域名 / Cloudflare（可选）"></a>3、域名 / Cloudflare（可选）</h3><p>我们还可以进一步通过在 Cloudflare 上设置域名解析实现域名访问。如果你只想通过 IP +端口的方式访问的话，当然也就不需要域名了，也不需要使用 Cloudflare 了，所以域名与 Cloudflare 是可选的。注意，使用 IPv6 公网 IP + 端口访问的话，你访问网络也是需要支持 IPv6 的，现在手机网络默认就有 IPv6，如果使用电脑接的网络不支持 IPv6 访问，可以连接手机热点。使用这种方式，我强烈建议你要开启来源 IP 白名单配置，因为如果你的公网 IP 泄露的话，可能会被 DDoS 攻击，虽然我们用的软路由或者是路由器它有一定的 DDoS 防护，但也不能应对大规模的攻击，可能会被打穿。如果你不方配着来源 IP 白名单的话，那我就强烈建议你要用域名的方式访问，因为用域名的话，我们用 Cloudflare，可以使用它的 DDoS 防护，这样就更安全。</p><p>现在域名也比较便宜，几块钱你就能买一年，Cloudflare 也是可以免费注册使用的。域名的话，你也可以在这个Cloudflare 上面购买，因为它的价格基本上是最低的，也没有一些第一年便宜第二年贵的套路。</p><p>当然，使用 Cloudflare 实现域名访问，其实也还是有一个缺点，因为它是国外公司的产品，在国内访问托管在上面的域名的时候，可能不是很稳定，所以可能有的同学访问就会比较慢。</p><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="配置-IP-端口访问"><a href="#配置-IP-端口访问" class="headerlink" title="配置 IP + 端口访问"></a>配置 IP + 端口访问</h3><h4 id="获取电脑-IPv6-公网-IP"><a href="#获取电脑-IPv6-公网-IP" class="headerlink" title="获取电脑 IPv6 公网 IP"></a>获取电脑 IPv6 公网 IP</h4><p>首先需要获取一下电脑的 IPv6 公网 IP，我们可以通过这个命令来获取自己的电脑的 IPv6 公网 IP，这个 <code>240C::6666</code> 是一个 IPv6 公共 DNS 地址。</p><p><img src="https://hexoblog.r2.depp.wang/20240331001533.png" alt=""></p><p><code>240</code> 开头就是公网 IP，红色就是我的 IPv6 公网 IP。</p><h4 id="防火墙配置只有电脑-IP-可外网访问"><a href="#防火墙配置只有电脑-IP-可外网访问" class="headerlink" title="防火墙配置只有电脑 IP 可外网访问"></a>防火墙配置只有电脑 IP 可外网访问</h4><p>获得了 IPv6 公网 IP，我们还需要在我们防火墙里面配置指定 IP 可被公网访问，我在 iStoreOS 系统中配置，在「网络-防火墙-数据规则」里面配置我添加一条规则，配置我电脑的 IP 和端口 9090 可被公网访问，保存并应用。</p><p><img src="https://hexoblog.r2.depp.wang/20240331001927.png" alt=""></p><h4 id="让启动的应用服务可通过-IPv6-访问"><a href="#让启动的应用服务可通过-IPv6-访问" class="headerlink" title="让启动的应用服务可通过 IPv6 访问"></a>让启动的应用服务可通过 IPv6 访问</h4><p>我们有 IPv6 公网 IP，配置了防火墙，但此时应用服务也需要支持 IPv6 访问才行，我使用一个简单 Flask 项目来举例说明，下面创建一个简单的 Flask 项目，使其启动后可通过 <code>http://[ipv6]:9090</code> 来访问。</p><p>创建 Flask 项目：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir flask-demo</span><br><span class="line">cd flask-demo</span><br><span class="line">python3 -m venv venv</span><br><span class="line">. venv/bin/activate</span><br><span class="line">pip3 install flask</span><br><span class="line">vi app.py</span><br></pre></td></tr></table></figure><p>app.py 代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'::'</span>, port=<span class="number">9090</span>)</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> app.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>启动结果：</p><p><img src="https://hexoblog.r2.depp.wang/20240331002759.png" alt=""></p><p>我使用 telnet 命令和网页访问测试一下，我利用 Tailscale 使用屏幕共享控制另一台电脑测试，这台电脑是连的热点，所以是支持 IPv6 访问。</p><p><img src="https://hexoblog.r2.depp.wang/20240331003020.png" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/20240331003054.png" alt=""></p><p>结果显示 telnet 与网页访问都没有问题。如果只想通过这种方式访问家里电脑的服务的话，那后面就不用看了。</p><h3 id="配置域名访问"><a href="#配置域名访问" class="headerlink" title="配置域名访问"></a>配置域名访问</h3><h4 id="Cloudflare-DNS-配置实现可域名-端口访问"><a href="#Cloudflare-DNS-配置实现可域名-端口访问" class="headerlink" title="Cloudflare DNS 配置实现可域名 + 端口访问"></a>Cloudflare DNS 配置实现可域名 + 端口访问</h4><p>可以通过 Cloudflare 配置域名解析实现可域名访问，因为现在的 80 和443 端口是被运营商封禁了的，你不能直接使用 80 与 443 端口。先配置实现域名 + 指定端口访问。</p><p>在 Cloudflare DNS 中配置 DNS 解析：</p><p><img src="https://hexoblog.r2.depp.wang/20240331003641.png" alt=""></p><p>DNS 解析可通过 <a href="https://dnschecker.org/" target="_blank" rel="noopener">DNS Checker</a> 来检测是否已生效，再用另一台电脑通过 <code>ping6</code> 来测试是否已生效，注意是 <code>ping6</code> 不是 ping，我就在这里踩坑了，一直用 ping，结果不通，以为 DNS 解析有什么问题，浪费不少时间。以下代表 ping 通了。</p><p><img src="https://hexoblog.r2.depp.wang/20240331003846.png" alt=""></p><p>网页访问也没有问题：</p><p><img src="https://hexoblog.r2.depp.wang/20240331003951.png" alt=""></p><p>目前就可以通过域名 + 端口访问了。</p><h4 id="Cloudflare-配置实现不要端口直接域名访问"><a href="#Cloudflare-配置实现不要端口直接域名访问" class="headerlink" title="Cloudflare 配置实现不要端口直接域名访问"></a>Cloudflare 配置实现不要端口直接域名访问</h4><p>前面说这个 80 和 443 端口被运营商封禁了，但我们可以使用 Cloudflare 实现免端口访问。Cloudflare 可以通过配置端口转发的方式实现不要端口直接访问，相当于把 80/443 端口转发到指定端口。</p><p>首先，我们需要在 「规则 - Origin Rules」里面创建一个自定义规则。配置当访问二级域名 wx.depp.wang 时，请求转发到 9090 端口：</p><p><img src="https://hexoblog.r2.depp.wang/20240331004319.png" alt=""></p><p>第二，在 DNS 解析这里打开这个代理状态：</p><p><img src="https://hexoblog.r2.depp.wang/20240331004625.png" alt=""></p><p>我解释一下，为什么要打开，打开后，我们在访问域名的时候，它会先解析到 Cloudflare 的主机上，Cloudflare 在那个主机上面给做一个代理转发，转发到我们配置的公网 IP 和端口对应的服务上。这样就实现了直接域名访问。</p><p> DNS Checker 检测已生效后，通过 <code>ping6</code> 与网页测试。</p><p><img src="https://hexoblog.r2.depp.wang/20240331004726.png" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/20240331004952.png" alt=""></p><p>都没有问题，说明我们配置成功。</p><h2 id="解决-IPv6-公网-IP-变化问题"><a href="#解决-IPv6-公网-IP-变化问题" class="headerlink" title="解决 IPv6 公网 IP 变化问题"></a>解决 IPv6 公网 IP 变化问题</h2><h3 id="1、使用-DDNS-更新-DNS-解析的公网-IP"><a href="#1、使用-DDNS-更新-DNS-解析的公网-IP" class="headerlink" title="1、使用 DDNS 更新 DNS 解析的公网 IP"></a>1、使用 DDNS 更新 DNS 解析的公网 IP</h3><p>因为公网 IP 可能随着网络的变化而变化，根据你自己的 IP 变化的情况，你可以自己判断要不要使用 DDNS，它可以动态的把你的公网 IP 更新到 Cloudflare 的 DNS 上去，这样你不用自己手动更新 IP，如果你用的话，我推荐使用 <a href="https://github.com/jeessy2/ddns-go" target="_blank" rel="noopener">ddns-go</a>，如果使用 macOS，可以用 brew 安装，配置教程可以参考<a href="https://lijianfei.com/post/yi-jian-gao-ding-cloudflare-dns-zi-dong-geng-xin-gao-bie-shou-dong-fan-suo/" target="_blank" rel="noopener">这篇文章</a>。</p><h3 id="2、使用定时任务执行脚本更新防火墙配置的公网-IP"><a href="#2、使用定时任务执行脚本更新防火墙配置的公网-IP" class="headerlink" title="2、使用定时任务执行脚本更新防火墙配置的公网 IP"></a>2、使用定时任务执行脚本更新防火墙配置的公网 IP</h3><p>我写一个脚本 <code>update-ipv6.sh</code>，利用 crontab 定时执行脚本，脚本内容为先获取 IPv6 地址，再 SSH 登陆到 iStoreOS 中更新防火墙配置的公网 IP。iStoreOS 基于 OpenWRT，脚本应该也适用于 OpenWRT。</p><p>1、<code>update-ipv6.sh</code> 脚本，脚本内容根据你自己的情况来调整</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">LOG_FILE=./cronjob.log</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Task started at: <span class="variable">$(date)</span>"</span> &gt;&gt; <span class="variable">$LOG_FILE</span></span><br><span class="line"></span><br><span class="line">output=$(/sbin/ping6 -c 1 240C::6666)</span><br><span class="line">ipv6=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$output</span>"</span> | grep -oE <span class="string">'([0-9a-f:]&#123;1,4&#125;)+ --&gt; '</span> | cut -d<span class="string">" "</span> -f1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"IPv6: <span class="variable">$ipv6</span>"</span> &gt;&gt; <span class="variable">$LOG_FILE</span></span><br><span class="line"></span><br><span class="line">ssh -i ~/.ssh/id_rsa_own root@192.168.100.1 &lt;&lt;EOF</span><br><span class="line">uci <span class="built_in">set</span> firewall.@rule[your rule number].dest_ip=<span class="string">"<span class="variable">$ipv6</span>"</span></span><br><span class="line">uci commit firewall</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"END --------------- "</span> &gt;&gt; <span class="variable">$LOG_FILE</span></span><br></pre></td></tr></table></figure><p>2、配置 crontab 定时执行脚本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看规则配置</span></span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 规则配置示例，`*/5  * * *` 代表每 5 分钟执行一下。根据自己需求调整</span></span><br><span class="line">*/5 * * * * sh /Users/depp/update-ipv6.sh</span><br></pre></td></tr></table></figure><ul><li>脚本需要位于当前用户下，不然可能无法执行</li></ul><p>3、iStoreOS 中设置 SSH 登录</p><p><img src="https://hexoblog.r2.depp.wang/20240403112558.png" alt=""></p><p>将公钥加到 iStoreOS 的 <code>authorized_keys</code> 中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.100.1 <span class="string">'cat &gt;&gt; /etc/dropbear/authorized_keys'</span> &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><hr><p>iStore 命令行常用查看与修改防火墙命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有防火墙配置</span></span><br><span class="line">uci show firewall </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定名称的所有防火墙配置，示例：uci show firewall | grep <span class="string">"name='test'"</span></span></span><br><span class="line">uci show firewall | grep "name='your rule name'"  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改第指定个规则 的 ip，示例：uci <span class="built_in">set</span> firewall.@rule[10].dest_ip=<span class="string">'240e:330:2d10:3704:842d:e5d6:da9:1c02'</span></span></span><br><span class="line">uci set firewall.@rule[your rule number].dest_ip='new ip' </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交保存防火墙规则</span></span><br><span class="line">uci commit firewall</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://depp.wang/2024/03/23/ipv6-mac-server/#disqus_thread</comments>
    </item>
    
    <item>
      <title>静态博客也可以使用 Google Analytics 分析流量来源</title>
      <link>https://depp.wang/2024/03/19/google-analytics/</link>
      <guid>https://depp.wang/2024/03/19/google-analytics/</guid>
      <pubDate>Tue, 19 Mar 2024 15:09:48 GMT</pubDate>
      <description>
      
        &lt;p&gt;虽然我这个静态博客搭建很久了，但一直不知道可以使用 Google Analytics 来流量分析。通过&lt;a href=&quot;https://blog.douchi.space/static-blog-half-year/#gsc.tab=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇博文&lt;/a&gt;了解到静态博客也可以做流量分析，推测博主是用的 Google Analytics 做的流量分析，我也就把我的博客加上了。还是比较简单，复制其 JS 代码到博客源文件就行。现在有 24 小时了，可以看到一些数据了。我想可能很多朋友和我一样，还不知道这个工具，所以分享一下。下面简单演示一下如何查看流量来源。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>虽然我这个静态博客搭建很久了，但一直不知道可以使用 Google Analytics 来流量分析。通过<a href="https://blog.douchi.space/static-blog-half-year/#gsc.tab=0" target="_blank" rel="noopener">这篇博文</a>了解到静态博客也可以做流量分析，推测博主是用的 Google Analytics 做的流量分析，我也就把我的博客加上了。还是比较简单，复制其 JS 代码到博客源文件就行。现在有 24 小时了，可以看到一些数据了。我想可能很多朋友和我一样，还不知道这个工具，所以分享一下。下面简单演示一下如何查看流量来源。</p><a id="more"></a><p>Google Analytics 的<a href="https://support.google.com/analytics/answer/9756891?sjid=17191511922244892220-AP" target="_blank" rel="noopener">默认渠道组</a>，已经针对流量来源做了默认区分。所以流量来源可以在「首页」和「报告」处查看一些，但如果想查看更详细的流量来源，可以使用「探索」。</p><table><thead><tr><th>首页</th><th>报告</th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/20240319223919.png" alt="首页"></td><td><img src="https://hexoblog.r2.depp.wang/20240319223817.png" alt="报告"></td></tr></tbody></table><p>在「探索」，创建一个「空白探索」，在过滤器中设置你想过滤的具体数据，你就可以筛选查看具体的流量来源了</p><p><img src="https://hexoblog.r2.depp.wang/20240319225034.png" alt=""></p>]]></content:encoded>
      
      <comments>https://depp.wang/2024/03/19/google-analytics/#disqus_thread</comments>
    </item>
    
    <item>
      <title>为什么 Cloudflare Worker 部署 VLESS 代理服务可以实现白嫖翻墙</title>
      <link>https://depp.wang/2024/03/17/cloudflare-worker-vless/</link>
      <guid>https://depp.wang/2024/03/17/cloudflare-worker-vless/</guid>
      <pubDate>Sun, 17 Mar 2024 14:17:06 GMT</pubDate>
      <description>
      
        &lt;p&gt;这两天刷推，看见不少推文实现了用 Cloudflare Worker 白嫖翻墙，我也鼓捣了试了一下，确实可以。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hexoblog.r2.depp.wang/202406191718786599.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>这两天刷推，看见不少推文实现了用 Cloudflare Worker 白嫖翻墙，我也鼓捣了试了一下，确实可以。</p><p><img src="https://hexoblog.r2.depp.wang/202406191718786599.jpg" alt=""></p><a id="more"></a><p>但正如这位推主<a href="https://twitter.com/huhexian/status/1769318527369097411" target="_blank" rel="noopener">所说</a>，折腾探索一下就行，还是得用机场。我折腾主要是想了解一下它的实现原理。至于如何折腾， 可以参考<a href="https://github.com/cmliu/edgetunnel" target="_blank" rel="noopener">这个教程</a>，文字 + 视频都有，还是比较简单。用其默认的 proxyIP 不能使用 GPT 等，我改了下 proxyIP，改为了 47.254.66.75，改后可以。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Cloudflare 的 Worker 可以部署 JavaScrip 函数，实现一些功能，类似 Serverless。相当于 Cloudflare 的 Worker 可以提供运算能力，可以把 Worker 当国外主机（VPS）使用。Cloudflare 注册用户每天有 10 万个请求可以使用。（Page 与 Worker 一样的道理，使用 Page 的优势在于使用自定义域名时可以不将域名注册转到 Cloudflare）</p><p>而国内网络用可以访问 Cloudflare Worker，Worker 可以访问国外的网站，所以可以使用 Worker 做代理转发，转发时加上 VLESS Header 信息，可以逃避防火墙的审查。但因为没有做高级混淆，所以这种方式可能过一段时间这种方式就会失效。</p><p><img src="https://hexoblog.r2.depp.wang/20240317170638.png" alt="图片来自于 upsangel.com"></p><h2 id="为什么需要优选-IP"><a href="#为什么需要优选-IP" class="headerlink" title="为什么需要优选 IP"></a>为什么需要优选 IP</h2><p>因为国内网络访问 Cloudflare 不是很稳定，国内网络访问优选 IP 更稳定，有优选 IP 时：国内网络 -&gt; 墙 -&gt; 优选 IP -&gt; Worker -&gt; Origin。这样可以提升稳定性与速度。</p><h2 id="为什么需要-proxyIP"><a href="#为什么需要-proxyIP" class="headerlink" title="为什么需要 proxyIP"></a>为什么需要 proxyIP</h2><p>Cloudflare 设计了 Worker 不能访问托管到 Cloudflare 上的网站，如果没有 proxyIP，就不能访问托管到 Cloudflare 上的网站，所以使用 proxyIP 反向代理一下。路径示意：国内网络 -&gt; 墙 -&gt; 优选 IP -&gt; Worker -&gt; proxyIP -&gt; Origin。</p><p>这个 proxyIP 是谁维护的我也不清楚，因为这种翻墙方式只是数据包加了 VLESS Header，所以其安全性我也不知道，建议不要主力使用。</p><h2 id="为什么-cmliu-edgetunnel-的-worker-js-方便易用"><a href="#为什么-cmliu-edgetunnel-的-worker-js-方便易用" class="headerlink" title="为什么 cmliu/edgetunnel 的 _worker.js 方便易用"></a>为什么 cmliu/edgetunnel 的 <code>_worker.js</code> 方便易用</h2><ol><li>其通用订阅地址可以适配各种客户端</li><li>维护了订阅生成服务，可自动更新优选 IP 与 proxyIP</li><li>维护了订阅规则，如果域名没走配置群组，就走「漏网之鱼」</li><li>还针对没有域名的用户提供了临时域名</li></ol><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><ul><li><a href="https://blog.mareep.net/posts/10934/?utm_source=pocket_saves" target="_blank" rel="noopener">cloudflare worker搭建vless</a></li><li><a href="https://upsangel.com/security/vpn/cloudflare-worker-vless%E7%BF%BB%E7%89%86%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86-proxyip%E7%B4%B0%E7%AF%80%E7%A0%94%E7%A9%B6/" target="_blank" rel="noopener">真的安全？Cloudflare Worker部署VLESS翻墙代理的原理和proxyIP细节研究</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2024/03/17/cloudflare-worker-vless/#disqus_thread</comments>
    </item>
    
    <item>
      <title>观《进击的巨人》</title>
      <link>https://depp.wang/2024/03/13/attack-on-titan/</link>
      <guid>https://depp.wang/2024/03/13/attack-on-titan/</guid>
      <pubDate>Wed, 13 Mar 2024 09:37:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://hexoblog.r2.depp.wang/wp8738402.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文涉及剧透！&lt;/p&gt;
&lt;p&gt;因为《周处除三害》充了 Netflix 的会员，拾起了原来因为漫画烂尾而没有看完的《进击的巨人》，看完发现动画版的结局不算烂尾，可以说《进击的巨人》是我看过的最好的动画剧集了。&lt;/p&gt;
&lt;p&gt;此剧看完，我最大的疑问就是，艾伦为什么要发动地鸣，杀死墙外 4/5 的人类，因为在我看过的作品中，从没有作者将主角写得这么黑暗。虽然这个黑暗结果可以拉高作品的高度，使其更加不可超越。但一旦处理不好，就可能会烂尾，就像漫画的结尾一样。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://hexoblog.r2.depp.wang/wp8738402.jpg" alt=""></p><p>本文涉及剧透！</p><p>因为《周处除三害》充了 Netflix 的会员，拾起了原来因为漫画烂尾而没有看完的《进击的巨人》，看完发现动画版的结局不算烂尾，可以说《进击的巨人》是我看过的最好的动画剧集了。</p><p>此剧看完，我最大的疑问就是，艾伦为什么要发动地鸣，杀死墙外 4/5 的人类，因为在我看过的作品中，从没有作者将主角写得这么黑暗。虽然这个黑暗结果可以拉高作品的高度，使其更加不可超越。但一旦处理不好，就可能会烂尾，就像漫画的结尾一样。</p><a id="more"></a><p>在动画中的最后两集中，导演做出了回答，我也看了一些解读，大概可以理解为 3 个原因。</p><ol><li>进击的巨人能看见未来的记忆碎片，在未来的记忆中看见了目前这个结局，事情只是按原定的、本来的路径发展，这里有点宿命的感觉，这个是艾伦也无法改变的。就好像是人类让巨人之力消失的代价。</li><li>这是艾伦为了保护他最重要的人的选择。杀掉 80% 的人类，可以让岛内与岛外科技恢复同一水平，从根本上让岛外世界对岛内真的没有威胁。自己扮演最大的恶人，让阿明他们杀死自己这个最大的恶人，用自己的死，让阿明他们扮演世界救世主的角色，可以进一步保护艾尔迪亚人。</li><li>当一个人掌握了绝对的权力，没有人可以产生威胁时，就可以做人内心深处最黑暗的事情，毕竟谁都有想毁灭世界的时候。</li></ol><p>艾伦不接受吉克的安乐死方案是想保护女王，为长久保持地鸣优势，女王需要继承兽之巨人，要像牲畜一样多生孩子，最后被自己的孩子吃掉，艾伦不能接受这个代价（64 集）。也是想阿明他们长寿，阿明是巨人，只能活 13 年。我想如果不选择安乐死和发动地鸣方案，而是通过地鸣维持威胁，当武器水平发展到和外界差不多时，主动消除巨人之力，这种方案不能保证岛外的人不会发动战争，并且此时艾伦已经死了，不能保证这个方案能执行下去。当选择这种方案，阿明和女王一样活不长。所以艾伦认为地鸣方案是最好的。</p><p>《进击的巨人》的世界观中，巨人的设定很好：因为人类的战争使尤弥尔获得了巨人之力， 人类因为巨人之力而发生无数战争， 最后以 80% 的人类被屠杀的代价让巨人之力消失。这个设定就极具想像力。《三体》也有点这个味道：因为人性的阴暗使叶文洁召唤三体人，地球因为三体人发生了巨变，最后结局是太阳系被二向箔打击而没有生命存在。而进击的巨人的设定：能看见过去与未来的片段、追求自由、不受始祖巨人约束等特点，让开头埋下伏笔，保持悬念到最后，产生冲突而让故事发展，宿命把伏笔填坑，让故事闭环，带来很多没想到和反转的剧情，也给观众留出了解读空间。故事因为巨人而开始，到巨人消失而结束。</p><p>《进击的巨人》的人物角色刻画也非常好，艾伦、阿明与三笠的三人友情，调查兵团的献出心脏，三笠的围巾，阿明的善良与聪明，兵长对埃尔文的承诺，莱纳的后悔，阿尼的回家，法尔可对贾碧的守护，萨沙的食欲，韩吉的责任，让的挣扎，康尼对母亲的行动，吉克的安乐死，弗洛克的坚持。每个角色的思想与行为都是合理的，都是为了自己或家人或朋友或国家或人类，都不得不这么做。最后艾伦的死，阿明不再天真的转变，三笠杀死艾伦的自我决定，又让三位主角升华。</p><p>关于为什么尤弥尔认为三笠可以解决她的问题，看有解读说是因为三笠那么爱艾伦，但最后选择了放手，亲手杀了艾伦。爱一个人是放手，这让尤弥尔得到了解放。我也比较认同这种观点。</p><p>《进击的巨人》能被称为神作，更多因为其代表的现实意义，这个世界每天都在发生战争，只要还存在人类，就会有战争，它只是用巨人来讲战争，因为有巨人的存在让故事更加吸引力，其底层更多是对人性的思考，是反战。当把错误呈现给你，你就会知道正确的是什么。正如萨沙的父亲所说，萨沙的死是在战争的森林中呆得太久了，这个森林中只有杀人或被杀。就像常在河边走，那能不湿鞋一样。而其中的墙、（篡改历史对应的）删除记忆、仇恨教育这些都在现实中真实存在。</p><p>宿命在《进击的巨人》中多处体现，过去、现在与未来，好像一个轮回。马莱，在艾尔迪亚人因为不战之誓已退居岛上了，仍利用仇恨教育，种族歧视国家中的艾尔迪亚人，压迫艾尔迪亚人为二等人，自己却使用艾尔迪亚人的巨人武器打压其它国家。还为了国家的发展来抢夺始祖巨人，结果损失几大巨人。正因为国家中艾尔迪亚人的长期被压迫，导致某些艾尔迪亚人，如格里沙想要反抗，想夺取始祖巨人，导致最后始祖巨人落在艾伦手中，导致最后的结局。戴巴，因为先辈的背叛而接受了惩罚，而他害怕的事情最后变为了现实。</p><p>感谢谏山创与动画制作团队做出了《进击的巨人》这部优秀的作品，这种观影体验对我来说是难得的人生体验。希望大家也去看看。</p><!--头脑的重要性，想象力的重要性，没有想象力是写不出这样的故事的--><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><ul><li><a href="https://www.netflix.com/watch/70298554" target="_blank" rel="noopener">进击的巨人 - Netflix</a></li><li><a href="https://www.douban.com/group/topic/288558872/?_i=0168584SxM_yPU" target="_blank" rel="noopener">为什么艾伦一定要发起地鸣 - 豆瓣小组</a></li><li><a href="https://www.reddit.com/r/ShingekiNoKyojin/comments/17o38bf/attack_on_titan_shingeki_no_kyojin_overall_anime/" target="_blank" rel="noopener">进击的巨人-整体动画系列讨论 - Reddit</a></li><li><a href="https://www.zhihu.com/question/629104220" target="_blank" rel="noopener">进击的巨人的结局好坏 - 知乎</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2024/03/13/attack-on-titan/#disqus_thread</comments>
    </item>
    
    <item>
      <title>封阳台窗户经验</title>
      <link>https://depp.wang/2024/02/27/balcony-window/</link>
      <guid>https://depp.wang/2024/02/27/balcony-window/</guid>
      <pubDate>Tue, 27 Feb 2024 04:27:00 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;确定样式&quot;&gt;&lt;a href=&quot;#确定样式&quot; class=&quot;headerlink&quot; title=&quot;确定样式&quot;&gt;&lt;/a&gt;确定样式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;因为有隔音要求，所以选择了平开窗，没有选滑窗。因为价格，选择的断桥铝，没有选系统窗&lt;/li&gt;
&lt;li&gt;颜色选的室内白色、室外灰色。&lt;/li&gt;
&lt;li&gt;邻居家串门发现玻璃也可以中间横向分隔，避免玻璃面积过大需要吊装，吊装需要格外收费&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="确定样式"><a href="#确定样式" class="headerlink" title="确定样式"></a>确定样式</h2><ul><li>因为有隔音要求，所以选择了平开窗，没有选滑窗。因为价格，选择的断桥铝，没有选系统窗</li><li>颜色选的室内白色、室外灰色。</li><li>邻居家串门发现玻璃也可以中间横向分隔，避免玻璃面积过大需要吊装，吊装需要格外收费</li></ul><a id="more"></a><table><thead><tr><th>确定样式</th><th>中横样式</th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/20240227123548.png" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/20240227112548.png" alt=""></td></tr></tbody></table><h2 id="确定商家"><a href="#确定商家" class="headerlink" title="确定商家"></a>确定商家</h2><ul><li>选择商家主要是通过配置与价格来比较的，比较了 3 个商家，第一个商家是小区五金店，老板人不错，在配置不错的前提下（108 双层中空信义 进口把手 国产五金 隔热PA66 胶条三元乙丙），价格是最低的；第二个商家是小红书上搜到的，我也去看了，价格稍微贵点，优势是有自己的工厂；第三个商家是给楼下邻居做过的，去看了一下，隔音效果还不错，外观也挺好的，价格比第一家贵点</li><li>虽然做了很多功课，在第一家与第二家时，一直在比较配置，如：型材宽度与厚度、玻璃品牌与类型、进口五金、隔音条类型等。但感受了第三家的效果，也就直接选择了。还是得实打实看落地效果</li></ul><h2 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h2><ul><li>玻璃面积超过 3 平方，就要用 120 的铝材，不然不安全</li><li>型材决定稳定性、质量；玻璃、隔音条决定隔音。安装技术也很重要，7 分材料 3 分安装</li><li>双层夹胶玻璃比中空玻璃隔音效果好，但没有性价比</li><li>系统窗就是出厂就组装好的断桥铝门窗</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>时间：我从预定到安装中间间隔了 2 个月，因为中间有过年，正常时间一个多月。阳台窗户安装最好在贴地面瓷砖之前，避免安窗户破坏已贴好的瓷砖</li><li>保护：如果窗户安装后，型材/玻璃上默认没有带有保护膜，最好自己保护一下，不然后期油漆弄上去了再清理比较麻烦</li><li>工作人员安装时可以会室外工作，室外工作有风险，安装前要签一个安全协议，如果发生意外事故你不会承担责任</li><li>原来拆除铝合金门窗回收价格挺高的，别卖便宜了</li></ul><h2 id="选购与价格"><a href="#选购与价格" class="headerlink" title="选购与价格"></a>选购与价格</h2><ol><li>选购 108 断桥铝平开窗配置：双层中空信义钢化玻璃（5 + 18 + 5）；进口把手 </li><li>价格：6100，一个窗户算一个平方，总共 12.4 个平方，单价 500 左右</li><li>质保：价格比较便宜，玻璃只质保半年。商家说第一个夏天不爆的话，后面基本不会爆了</li></ol><p><img src="https://hexoblog.r2.depp.wang/20240227121042.png" alt=""></p><p><img src="https://hexoblog.r2.depp.wang/20230102141757.png" alt="108 窗户的腔体结构"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装时我没有去现场，安装方式为现场组合安装，刚安装时的效果：<br><img src="https://hexoblog.r2.depp.wang/20240227120913.jpeg" alt=""> <img src="https://hexoblog.r2.depp.wang/20240227123827.png" style="zoom:33%;"> </p><h2 id="现在的感受"><a href="#现在的感受" class="headerlink" title="现在的感受"></a>现在的感受</h2><ol><li>开始选购时考虑和比较过多，直接看效果就行</li><li>108 的断桥铝平开窗隔音效果就不错了</li><li>平开窗的玻璃不太好擦</li></ol>]]></content:encoded>
      
      <comments>https://depp.wang/2024/02/27/balcony-window/#disqus_thread</comments>
    </item>
    
    <item>
      <title>智能门锁选购使用经验</title>
      <link>https://depp.wang/2024/02/26/smart-door-lock/</link>
      <guid>https://depp.wang/2024/02/26/smart-door-lock/</guid>
      <pubDate>Mon, 26 Feb 2024 08:32:15 GMT</pubDate>
      <description>
      
        &lt;p&gt;智能门锁是现代家庭中必不可少的设备，出门回家不用担心钥匙是否忘带，大大提高幸福指数&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>智能门锁是现代家庭中必不可少的设备，出门回家不用担心钥匙是否忘带，大大提高幸福指数</p><a id="more"></a><h2 id="选购与价格"><a href="#选购与价格" class="headerlink" title="选购与价格"></a>选购与价格</h2><ul><li>购买型号：小米智能门锁 Pro</li><li>原因：<ol><li>有摄像头，门前不用单独安装摄像头。也考虑过安装猫眼摄像头，但成本更高</li><li>执手款，半自动，更符合使用习惯</li><li>已接入 HomeKit，可直接添加到 HomeKit 中</li></ol></li><li>价格：1194（京东双十一）</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>安装一般需要改门，需要再钻一个孔</li><li>因为需要使用切割机，所以安装时会有声音</li></ol><h2 id="使用一段时间的感受"><a href="#使用一段时间的感受" class="headerlink" title="使用一段时间的感受"></a>使用一段时间的感受</h2><ol><li>备用钥匙很重要，经常网上看见门锁抽风，因为没有备用钥匙只能撬锁的案例</li><li>使用 4 个来月，目前摄像头电池充了 2 次电，门锁电池还有 80%</li><li>日常基本都使用的指纹，HomeKit 语音、NFC、数字密码、APP 等方式解锁基本没用过</li><li>可以设置智能场景，如：开锁时打开入户灯，1 分钟后关闭</li></ol>]]></content:encoded>
      
      <comments>https://depp.wang/2024/02/26/smart-door-lock/#disqus_thread</comments>
    </item>
    
    <item>
      <title>扫地机器人选购使用经验</title>
      <link>https://depp.wang/2024/02/26/sweeping-robot/</link>
      <guid>https://depp.wang/2024/02/26/sweeping-robot/</guid>
      <pubDate>Mon, 26 Feb 2024 08:09:59 GMT</pubDate>
      <description>
      
        &lt;p&gt;扫地机器人是现在家庭中一个很常见的清洁电器，购买前还是要做一下功能，看那款更适合自己，买了好用，物有所值。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>扫地机器人是现在家庭中一个很常见的清洁电器，购买前还是要做一下功能，看那款更适合自己，买了好用，物有所值。</p><a id="more"></a><h2 id="型号对比"><a href="#型号对比" class="headerlink" title="型号对比"></a>型号对比</h2><h3 id="石头-G10S-Pure、石头-G20、石头-P10-对比"><a href="#石头-G10S-Pure、石头-G20、石头-P10-对比" class="headerlink" title="石头 G10S Pure、石头 G20、石头 P10 对比"></a>石头 G10S Pure、石头 G20、石头 P10 对比</h3><p><img src="https://hexoblog.r2.depp.wang/20230601225142.png" alt=""></p><ul><li><a href="https://www.bilibili.com/video/BV13M411p7sD/" target="_blank" rel="noopener"># 3K+全能王者，石头真的“杀”疯了！石头P10、石头G20、石头G10S Pure</a></li></ul><h3 id="石头-P10、追觅-S20、云鲸-J3-对比"><a href="#石头-P10、追觅-S20、云鲸-J3-对比" class="headerlink" title="石头 P10、追觅 S20、云鲸 J3 对比"></a>石头 P10、追觅 S20、云鲸 J3 对比</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/20230530123223.png" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/20230530123344.png" alt=""></td></tr></tbody></table><ul><li><a href="https://www.bilibili.com/video/BV1sg4y1T7GU/" target="_blank" rel="noopener"># 扫地机器人横向测评、这些缺点咋都没人说？</a></li></ul><h3 id="科沃斯-T10-OMNI、石头-G10S、追觅-S10、云鲸-J3"><a href="#科沃斯-T10-OMNI、石头-G10S、追觅-S10、云鲸-J3" class="headerlink" title="科沃斯 T10 OMNI、石头 G10S、追觅 S10、云鲸 J3"></a>科沃斯 T10 OMNI、石头 G10S、追觅 S10、云鲸 J3</h3><p><img src="https://hexoblog.r2.depp.wang/20230529232107.png" alt=""></p><ul><li><a href="https://www.bilibili.com/video/BV18m4y1w7LL/" target="_blank" rel="noopener"># 【扫地机器人测评】科沃斯T10 OMNI/石头G10S/追觅S10/云鲸J3、18个维度深度横评、到底如何选择？</a></li></ul><h2 id="选购与价格"><a href="#选购与价格" class="headerlink" title="选购与价格"></a>选购与价格</h2><ol><li>购买型号：石头 P10 上下水版</li><li>价格：3392（京东双十一）</li><li>理由：<ol><li>石头相对口碑要好点</li><li>位置限制，只能买瘦长型</li><li>性价比相对较高</li><li>上下水不会频繁换水，更方便</li></ol></li><li>安装时因为水压过高，购买了 1 个降压配件 50 元</li></ol><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="https://hexoblog.r2.depp.wang/E9FDD128-6D29-45DB-B17B-C794B7C8BCB9_1_105_c.jpeg" alt=""></td><td><img src="https://hexoblog.r2.depp.wang/2D6EF347-DA3B-40B2-8457-9351F9F25AC2_1_105_c.jpeg" alt=""></td></tr></tbody></table><h2 id="使用一段时间的感受"><a href="#使用一段时间的感受" class="headerlink" title="使用一段时间的感受"></a>使用一段时间的感受</h2><ol><li>扫地机器人只能完成 70% 的工作，不能彻底打扫干净，不建议买太贵的</li><li>返回基座集尘时会有几秒时间声音特别大</li><li>使用 4 个来月，耗材还没有换过</li><li>石头 APP 与米家 APP 只能绑定其中一个，换绑时数据不会丢失</li><li>石头 P10 使用胶刷，还是不太容易缠头发</li><li>摄像头非必要可以不用，还是有隐私问题</li><li>可以通过定时功能设置先扫后拖，我是工作日每天下午 2 点扫，周 1 / 3 /5 下午 3 点工作拖</li></ol>]]></content:encoded>
      
      <comments>https://depp.wang/2024/02/26/sweeping-robot/#disqus_thread</comments>
    </item>
    
    <item>
      <title>净水器选购使用经验</title>
      <link>https://depp.wang/2024/02/26/water-purifier/</link>
      <guid>https://depp.wang/2024/02/26/water-purifier/</guid>
      <pubDate>Mon, 26 Feb 2024 06:20:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;住房舒适的 3 个关键：阳光、空气和水。净水器是现代家庭中必不可少的一项电器。我购买前在 BiliBili 上做了一些功课。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>住房舒适的 3 个关键：阳光、空气和水。净水器是现代家庭中必不可少的一项电器。我购买前在 BiliBili 上做了一些功课。</p><a id="more"></a><h2 id="推荐型号"><a href="#推荐型号" class="headerlink" title="推荐型号"></a>推荐型号</h2><p><img src="https://hexoblog.r2.depp.wang/20240226134728.png" alt=""></p><ul><li>现在海尔玉净鲜活水净水器 1000G 已经有了 TDS 屏显</li></ul><h2 id="选购与价格"><a href="#选购与价格" class="headerlink" title="选购与价格"></a>选购与价格</h2><ul><li>购买型号：海尔（Haier）玉净鲜活水净水器 1000G</li><li>价格：1554（京东双十一）</li><li>安装：因为水压较高，额外使用了个降压配件，50 元</li></ul><h2 id="使用一段时间的感受"><a href="#使用一段时间的感受" class="headerlink" title="使用一段时间的感受"></a>使用一段时间的感受</h2><ol><li>使用 4 个来月，第 1 级-前后置复合滤芯还有 83%，第 2 级-反渗透膜滤芯还有 92%。</li><li>双出水还是挺实用，左净水平时生活用水，不经过 2 级滤芯，不需要用电。右纯水经过 2 级滤芯，需要用电，出水会稍微慢点，机器运行有点震动和声音</li><li>我没有用管线机，我喜欢将水烧开后喝，家中有恒温壶，先烧开后再恒温。加上管线机长期使用，内部会有点脏，有点受不了</li><li>对我家来说，1000G 通量够用了。2 个人使用，做饭和喝水时使用</li></ol><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><ul><li><a href="https://www.bilibili.com/video/BV12W4y1i7Zb/?spm_id_from=333.999.0.0&vd_source=3b0c3f59d36804169cb134f54acbf701" target="_blank" rel="noopener"># 【净水器选购】2022年净水器到底如何选不踩坑？</a></li><li><a href="https://www.bilibili.com/video/BV1EX4y1h7mi/?spm_id_from=333.788&vd_source=3b0c3f59d36804169cb134f54acbf701" target="_blank" rel="noopener"># 【买前必看】2023年净水器/洗碗机选购攻略！学长手把手教你选购全屋家电</a></li><li><a href="https://www.bilibili.com/video/BV1yh4y1J7yM/?spm_id_from=333.337.search-card.all.click&vd_source=3b0c3f59d36804169cb134f54acbf701" target="_blank" rel="noopener"># 报废级拆解，看透品牌净水器 | 净水器消费者报告（下）</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2024/02/26/water-purifier/#disqus_thread</comments>
    </item>
    
    <item>
      <title>燃气热水器选购使用经验</title>
      <link>https://depp.wang/2024/02/26/gas-water-heater/</link>
      <guid>https://depp.wang/2024/02/26/gas-water-heater/</guid>
      <pubDate>Mon, 26 Feb 2024 01:35:15 GMT</pubDate>
      <description>
      
        &lt;p&gt;我做的功课主要来自于 BiliBili &lt;a href=&quot;https://space.bilibili.com/13207529&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wilson学长&lt;/a&gt; 的这个功略：&lt;a href=&quot;https://www.bilibili.com/video/BV1xj411g7cd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;燃气热水器应该如何选？&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>我做的功课主要来自于 BiliBili <a href="https://space.bilibili.com/13207529" target="_blank" rel="noopener">Wilson学长</a> 的这个功略：<a href="https://www.bilibili.com/video/BV1xj411g7cd/" target="_blank" rel="noopener">燃气热水器应该如何选？</a></p><a id="more"></a><h2 id="海尔型号对比"><a href="#海尔型号对比" class="headerlink" title="海尔型号对比"></a>海尔型号对比</h2><p>海尔线上占有率第一（2022）：</p><p><img src="https://hexoblog.r2.depp.wang/20240222205125.png" alt=""></p><p>海尔热门型号对比：</p><p><img src="https://hexoblog.r2.depp.wang/20240222205155.png" alt=""></p><h2 id="零冷水热水器"><a href="#零冷水热水器" class="headerlink" title="零冷水热水器"></a>零冷水热水器</h2><ol><li>零冷水热水器需要多一根回水管，需要水电时预埋安装</li><li>零冷水热水器最好买 3 管零冷水版，效果更好</li><li>如果 2 个卫生间相隔较远，只有一个热门器，一定要做零冷水，不然等热水太烦心</li><li>做零冷水，热水器成本多 1000 元左右，水价 1.30元/立方米左右，不做零冷水等热水浪费冷水的水价应该是不会超过成本</li></ol><h2 id="选购与价格"><a href="#选购与价格" class="headerlink" title="选购与价格"></a>选购与价格</h2><ol><li>我购买的型号是：海尔 JM6，16L 版本</li><li>虽然只有一个卫生间，一般也没有厨房与卫生间一起使用的场景，但还是选了 16 升，没有选 13 升</li><li>纠结下置风机还是上置风机，但 KL3 与 JM6 能效与质保年限相同，因为价格还是选了上置风机。</li><li>价格：1229 （京东 618）</li><li>安装时已提前准备燃气管等相关配件，安装没有收费，安装师傅挺好</li></ol><p><img src="https://hexoblog.r2.depp.wang/20240222205033.png" alt=""></p><h2 id="使用一段时间的感受"><a href="#使用一段时间的感受" class="headerlink" title="使用一段时间的感受"></a>使用一段时间的感受</h2><ol><li>热水器原来没有想过可以连接 APP，选购时也没有考虑这个功能，安装一般时间后惊喜发现有 WIFI 模块，可以通过海尔智家 APP 操控</li><li>还是有点后悔没有做零冷水，一开始不知道需要预埋回水管，虽然成本会高点，但更节约水，体验也会更好点</li></ol>]]></content:encoded>
      
      <comments>https://depp.wang/2024/02/26/gas-water-heater/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
